# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020-2023 Intel Corporation

apiVersion: v1
kind: ConfigMap
metadata:
  name: daemon-config
  namespace: "{{ .ETHERNET_NAMESPACE }}"
immutable: false
data:
  serviceAccount: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: fwddp-daemon
      namespace: "{{ .ETHERNET_NAMESPACE }}"
  role: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: fwddp-daemon
      namespace: "{{ .ETHERNET_NAMESPACE }}"
    rules:
      - apiGroups:
          - ethernet.intel.com
        resources:
          - '*'
          - ethernetnodes
        verbs:
          - '*'
      - apiGroups:
          - security.openshift.io
        resources:
          - securitycontextconstraints
        verbs:
          - use
        resourceNames:
          - privileged
      - apiGroups:
          - coordination.k8s.io
        resources:
          - leases
        verbs:
          - '*'
  roleBinding: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: fwddp-daemon
      namespace: "{{ .ETHERNET_NAMESPACE }}"
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: fwddp-daemon
    subjects:
      - kind: ServiceAccount
        name: fwddp-daemon
        namespace: "{{ .ETHERNET_NAMESPACE }}"
  clusterRole: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: fwddp-daemon
    rules:
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["*"]
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch", "patch", "update"]
      - apiGroups: ["apps"]
        resources: ["daemonsets"]
        verbs: ["get"]
      - apiGroups: [""]
        resources: ["pods/eviction"]
        verbs: ["create"]
  clusterRoleBinding: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: fwddp-daemon
    subjects:
      - kind: ServiceAccount
        name: fwddp-daemon
        namespace: "{{ .ETHERNET_NAMESPACE }}"
    roleRef:
      kind: ClusterRole
      name: fwddp-daemon
      apiGroup: rbac.authorization.k8s.io
      namespace: "{{ .ETHERNET_NAMESPACE }}"
  daemonSet: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        app: fwddp-daemon
      name: fwddp-daemon
      namespace: "{{ .ETHERNET_NAMESPACE }}"
      annotations:
        openshift.io/scc: fwddp-daemon
    spec:
      selector:
        matchLabels:
          app: fwddp-daemon
      template:
        metadata:
          # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
          # reserves resources for critical add-on pods so that they can be rescheduled after
          # a failure.  This annotation works in tandem with the toleration below.
          annotations:
            scheduler.alpha.kubernetes.io/critical-pod: ""
          labels:
            app: fwddp-daemon
        spec:
          nodeSelector:
            {{ .ETHERNET_NODE_LABEL }}: ""
          serviceAccount: fwddp-daemon
          serviceAccountName: fwddp-daemon
          hostPID: true
          hostNetwork: true
          dnsPolicy: ClusterFirstWithHostNet
          initContainers:
            - command:
                - /bin/bash
              args:
                - -c
                - echo -n /var/lib/firmware/ > /host/sys/module/firmware_class/parameters/path
              name: alt-fw-search-path-enabler
              image: docker.io/redhat/ubi9-micro:9.2-5
              resources:
                limits:
                  cpu: 200m
                  memory: 400Mi
                requests:
                  cpu: 200m
                  memory: 400Mi
              securityContext:
                privileged: true
                runAsUser: 0
                readOnlyRootFilesystem: true
              volumeMounts:
                - name: firmware-class
                  mountPath: /host/sys/module/firmware_class/parameters
          containers:
            - name: fwddp-daemon
              image: "{{ .ETHERNET_DAEMON_IMAGE }}"
              args:
                - --zap-log-level=4
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: tlscert
                  mountPath: "/etc/certificate"
                  readOnly: true
                - name: run-systemd
                  mountPath: /host/run/systemd
                - name: run-dbus
                  mountPath: /host/run/dbus
                  readOnly: true
                - name: run-volume
                  mountPath: /run
                - name: nvmupdate-volume
                  mountPath: /tmp
                - name: binaries
                  mountPath: /host/bin/
                  readOnly: true
                - name: config-volume
                  mountPath: "/devices.json"
                  subPath: devices.json
                  readOnly: true
                - name: libmodules
                  mountPath: /lib/modules
                  readOnly: true
                - name: lib
                  mountPath: /host/usr/lib
                  readOnly: true
                - name: lib
                  mountPath: /host/lib
                  readOnly: true
                - name: lib64
                  mountPath: /host/usr/lib64
                  readOnly: true
                - name: lib64
                  mountPath: /host/lib64
                  readOnly: true
                - name: firmware-ddp
                  mountPath: /lib/firmware
              env:
                {{ if ne .NO_PROXY "" }}
                - name: NO_PROXY
                  value: "{{ .NO_PROXY }}"
                - name: no_proxy
                  value: "{{ .NO_PROXY  }}"
                {{ end }}
                {{ if ne .HTTP_PROXY "" }}
                - name: HTTP_PROXY
                  value: "{{ .HTTP_PROXY }}"
                - name: http_proxy
                  value: "{{ .HTTP_PROXY  }}"
                {{ end }}
                {{ if ne .HTTPS_PROXY "" }}
                - name: HTTPS_PROXY
                  value: "{{ .HTTPS_PROXY  }}"
                - name: https_proxy
                  value: "{{ .HTTPS_PROXY  }}"
                {{ end }}
                - name: ETHERNET_GENERIC_K8S
                  value: "{{ .ETHERNET_GENERIC_K8S }}"
                - name: ETHERNET_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: NODENAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: DRAIN_TIMEOUT_SECONDS
                  value: "90"
                - name: LEASE_DURATION_SECONDS
                  value: "600"
              securityContext:
                readOnlyRootFilesystem: true
                privileged: true
                runAsUser: 0
          volumes:
            - name: tlscert
              secret:
                secretName: tls-cert
                optional: true
            - name: run-systemd
              hostPath:
                path: /run/systemd
            - name: nvmupdate-volume
              hostPath:
                path: /tmp/
            - name: run-dbus
              hostPath:
                path: /run/dbus
            - name: binaries
              hostPath:
                path: /usr/bin/
            - name: run-volume
              emptyDir: {}
            - name: config-volume
              configMap:
                name: supported-clv-devices
            - name: libmodules
              hostPath:
                path: /lib/modules
            - name: lib
              hostPath:
                path: /usr/lib
            - name: lib64
              hostPath:
                path: /usr/lib64
            - name: firmware-class
              hostPath:
                path: /sys/module/firmware_class/parameters
            - name: firmware-ddp
              hostPath:
                path: {{ .FW_HOST_PATH }}
