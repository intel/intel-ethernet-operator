// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2020-2023 Intel Corporation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: pkg/flowconfig/rpc/v1/flow/flow.proto

package flow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RteFlowItemType int32

const (
	//*
	// [META]
	//
	// End marker for item lists. Prevents further processing of items;
	// thereby ending the pattern.
	//
	// No associated specification messageure.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_END RteFlowItemType = 0
	//*
	// [META]
	//
	// Used as a placeholder for convenience. It is ignored and simply
	// discarded by PMDs.
	//
	// No associated specification messageure.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_VOID RteFlowItemType = 1
	//*
	// [META]
	//
	// Inverted matching; i.e. process packets that do not match the
	// pattern.
	//
	// No associated specification messageure.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_INVERT RteFlowItemType = 2
	//*
	// Matches any protocol in place of the current layer; a single ANY
	// may also stand for several protocol layers.
	//
	// See message rte_flow_item_any.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ANY RteFlowItemType = 3
	//*
	// [META]
	//
	// Matches traffic originating from (ingress) or going to (egress)
	// the physical function of the current device.
	//
	// No associated specification messageure.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_PF RteFlowItemType = 4
	//*
	// [META]
	//
	// Matches traffic originating from (ingress) or going to (egress) a
	// given virtual function of the current device.
	//
	// See message rte_flow_item_vf.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_VF RteFlowItemType = 5
	//*
	// [META]
	//
	// Matches traffic originating from (ingress) or going to (egress) a
	// physical port of the underlying device.
	//
	// See message rte_flow_item_phy_port.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_PHY_PORT RteFlowItemType = 6
	//*
	// [META]
	//
	// Matches traffic originating from (ingress) or going to (egress) a
	// given DPDK port ID.
	//
	// See message rte_flow_item_port_id.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_PORT_ID RteFlowItemType = 7
	//*
	// Matches a byte string of a given length at a given offset.
	//
	// See message rte_flow_item_raw.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_RAW RteFlowItemType = 8
	//*
	// Matches an Ethernet header.
	//
	// See message rte_flow_item_eth.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ETH RteFlowItemType = 9
	//*
	// Matches an 802.1Q/ad VLAN tag.
	//
	// See message rte_flow_item_vlan.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_VLAN RteFlowItemType = 10
	//*
	// Matches an IPv4 header.
	//
	// See message rte_flow_item_ipv4.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_IPV4 RteFlowItemType = 11
	//*
	// Matches an IPv6 header.
	//
	// See message rte_flow_item_ipv6.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_IPV6 RteFlowItemType = 12
	//*
	// Matches an ICMP header.
	//
	// See message rte_flow_item_icmp.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ICMP RteFlowItemType = 13
	//*
	// Matches a UDP header.
	//
	// See message rte_flow_item_udp.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_UDP RteFlowItemType = 14
	//*
	// Matches a TCP header.
	//
	// See message rte_flow_item_tcp.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_TCP RteFlowItemType = 15
	//*
	// Matches a SCTP header.
	//
	// See message rte_flow_item_sctp.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_SCTP RteFlowItemType = 16
	//*
	// Matches a VXLAN header.
	//
	// See message rte_flow_item_vxlan.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_VXLAN RteFlowItemType = 17
	//*
	// Matches a E_TAG header.
	//
	// See message rte_flow_item_e_tag.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_E_TAG RteFlowItemType = 18
	//*
	// Matches a NVGRE header.
	//
	// See message rte_flow_item_nvgre.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_NVGRE RteFlowItemType = 19
	//*
	// Matches a MPLS header.
	//
	// See message rte_flow_item_mpls.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_MPLS RteFlowItemType = 20
	//*
	// Matches a GRE header.
	//
	// See message rte_flow_item_gre.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_GRE RteFlowItemType = 21
	//*
	// [META]
	//
	// Fuzzy pattern match; expect faster than default.
	//
	// This is for device that support fuzzy matching option.
	// Usually a fuzzy matching is fast but the cost is accuracy.
	//
	// See message rte_flow_item_fuzzy.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_FUZZY RteFlowItemType = 22
	//*
	// Matches a GTP header.
	//
	// Configure flow for GTP packets.
	//
	// See message rte_flow_item_gtp.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_GTP RteFlowItemType = 23
	//*
	// Matches a GTP header.
	//
	// Configure flow for GTP-C packets.
	//
	// See message rte_flow_item_gtp.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_GTPC RteFlowItemType = 24
	//*
	// Matches a GTP header.
	//
	// Configure flow for GTP-U packets.
	//
	// See message rte_flow_item_gtp.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_GTPU RteFlowItemType = 25
	//*
	// Matches a ESP header.
	//
	// See message rte_flow_item_esp.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ESP RteFlowItemType = 26
	//*
	// Matches a GENEVE header.
	//
	// See message rte_flow_item_geneve.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_GENEVE RteFlowItemType = 27
	//*
	// Matches a VXLAN-GPE header.
	//
	// See message rte_flow_item_vxlan_gpe.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_VXLAN_GPE RteFlowItemType = 28
	//*
	// Matches an ARP header for Ethernet/IPv4.
	//
	// See message rte_flow_item_arp_eth_ipv4.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ARP_ETH_IPV4 RteFlowItemType = 29
	//*
	// Matches the presence of any IPv6 extension header.
	//
	// See message rte_flow_item_ipv6_ext.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_IPV6_EXT RteFlowItemType = 30
	//*
	// Matches any ICMPv6 header.
	//
	// See message rte_flow_item_icmp6.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ICMP6 RteFlowItemType = 31
	//*
	// Matches an ICMPv6 neighbor discovery solicitation.
	//
	// See message rte_flow_item_icmp6_nd_ns.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ICMP6_ND_NS RteFlowItemType = 32
	//*
	// Matches an ICMPv6 neighbor discovery advertisement.
	//
	// See message rte_flow_item_icmp6_nd_na.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ICMP6_ND_NA RteFlowItemType = 33
	//*
	// Matches the presence of any ICMPv6 neighbor discovery option.
	//
	// See message rte_flow_item_icmp6_nd_opt.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT RteFlowItemType = 34
	//*
	// Matches an ICMPv6 neighbor discovery source Ethernet link-layer
	// address option.
	//
	// See message rte_flow_item_icmp6_nd_opt_sla_eth.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_SLA_ETH RteFlowItemType = 35
	//*
	// Matches an ICMPv6 neighbor discovery target Ethernet link-layer
	// address option.
	//
	// See message rte_flow_item_icmp6_nd_opt_tla_eth.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_TLA_ETH RteFlowItemType = 36
	//*
	// Matches specified mark field.
	//
	// See message rte_flow_item_mark.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_MARK RteFlowItemType = 37
	//*
	// [META]
	//
	// Matches a metadata value.
	//
	// See message rte_flow_item_meta.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_META RteFlowItemType = 38
	//*
	// Matches a GRE optional key field.
	//
	// The value should a big-endian 32bit integer.
	//
	// When this item present the K bit is implicitly matched as "1"
	// in the default mask.
	//
	// @p spec/mask type:
	// @code rte_be32_t * @endcode
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_GRE_KEY RteFlowItemType = 39
	//*
	// Matches a GTP extension header: PDU session container.
	//
	// Configure flow for GTP packets with extension header type 0x85.
	//
	// See message rte_flow_item_gtp_psc.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_GTP_PSC RteFlowItemType = 40
	//*
	// Matches a PPPoE header.
	//
	// Configure flow for PPPoE session packets.
	//
	// See message rte_flow_item_pppoe.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_PPPOES RteFlowItemType = 41
	//*
	// Matches a PPPoE header.
	//
	// Configure flow for PPPoE discovery packets.
	//
	// See message rte_flow_item_pppoe.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_PPPOED RteFlowItemType = 42
	//*
	// Matches a PPPoE optional proto_id field.
	//
	// It only applies to PPPoE session packets.
	//
	// See message rte_flow_item_pppoe_proto_id.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_PPPOE_PROTO_ID RteFlowItemType = 43
	//*
	// Matches Network service header (NSH).
	// See message rte_flow_item_nsh.
	//
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_NSH RteFlowItemType = 44
	//*
	// Matches Internet Group Management Protocol (IGMP).
	// See message rte_flow_item_igmp.
	//
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_IGMP RteFlowItemType = 45
	//*
	// Matches IP Authentication Header (AH).
	// See message rte_flow_item_ah.
	//
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_AH RteFlowItemType = 46
	//*
	// Matches a HIGIG header.
	// see message rte_flow_item_higig2_hdr.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_HIGIG2 RteFlowItemType = 47
	//
	// [META]
	//
	// Matches a tag value.
	//
	// See message rte_flow_item_tag.
	RteFlowItemType_RTE_FLOW_ITEM_TYPE_TAG RteFlowItemType = 48
)

// Enum value maps for RteFlowItemType.
var (
	RteFlowItemType_name = map[int32]string{
		0:  "RTE_FLOW_ITEM_TYPE_END",
		1:  "RTE_FLOW_ITEM_TYPE_VOID",
		2:  "RTE_FLOW_ITEM_TYPE_INVERT",
		3:  "RTE_FLOW_ITEM_TYPE_ANY",
		4:  "RTE_FLOW_ITEM_TYPE_PF",
		5:  "RTE_FLOW_ITEM_TYPE_VF",
		6:  "RTE_FLOW_ITEM_TYPE_PHY_PORT",
		7:  "RTE_FLOW_ITEM_TYPE_PORT_ID",
		8:  "RTE_FLOW_ITEM_TYPE_RAW",
		9:  "RTE_FLOW_ITEM_TYPE_ETH",
		10: "RTE_FLOW_ITEM_TYPE_VLAN",
		11: "RTE_FLOW_ITEM_TYPE_IPV4",
		12: "RTE_FLOW_ITEM_TYPE_IPV6",
		13: "RTE_FLOW_ITEM_TYPE_ICMP",
		14: "RTE_FLOW_ITEM_TYPE_UDP",
		15: "RTE_FLOW_ITEM_TYPE_TCP",
		16: "RTE_FLOW_ITEM_TYPE_SCTP",
		17: "RTE_FLOW_ITEM_TYPE_VXLAN",
		18: "RTE_FLOW_ITEM_TYPE_E_TAG",
		19: "RTE_FLOW_ITEM_TYPE_NVGRE",
		20: "RTE_FLOW_ITEM_TYPE_MPLS",
		21: "RTE_FLOW_ITEM_TYPE_GRE",
		22: "RTE_FLOW_ITEM_TYPE_FUZZY",
		23: "RTE_FLOW_ITEM_TYPE_GTP",
		24: "RTE_FLOW_ITEM_TYPE_GTPC",
		25: "RTE_FLOW_ITEM_TYPE_GTPU",
		26: "RTE_FLOW_ITEM_TYPE_ESP",
		27: "RTE_FLOW_ITEM_TYPE_GENEVE",
		28: "RTE_FLOW_ITEM_TYPE_VXLAN_GPE",
		29: "RTE_FLOW_ITEM_TYPE_ARP_ETH_IPV4",
		30: "RTE_FLOW_ITEM_TYPE_IPV6_EXT",
		31: "RTE_FLOW_ITEM_TYPE_ICMP6",
		32: "RTE_FLOW_ITEM_TYPE_ICMP6_ND_NS",
		33: "RTE_FLOW_ITEM_TYPE_ICMP6_ND_NA",
		34: "RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT",
		35: "RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_SLA_ETH",
		36: "RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_TLA_ETH",
		37: "RTE_FLOW_ITEM_TYPE_MARK",
		38: "RTE_FLOW_ITEM_TYPE_META",
		39: "RTE_FLOW_ITEM_TYPE_GRE_KEY",
		40: "RTE_FLOW_ITEM_TYPE_GTP_PSC",
		41: "RTE_FLOW_ITEM_TYPE_PPPOES",
		42: "RTE_FLOW_ITEM_TYPE_PPPOED",
		43: "RTE_FLOW_ITEM_TYPE_PPPOE_PROTO_ID",
		44: "RTE_FLOW_ITEM_TYPE_NSH",
		45: "RTE_FLOW_ITEM_TYPE_IGMP",
		46: "RTE_FLOW_ITEM_TYPE_AH",
		47: "RTE_FLOW_ITEM_TYPE_HIGIG2",
		48: "RTE_FLOW_ITEM_TYPE_TAG",
	}
	RteFlowItemType_value = map[string]int32{
		"RTE_FLOW_ITEM_TYPE_END":                  0,
		"RTE_FLOW_ITEM_TYPE_VOID":                 1,
		"RTE_FLOW_ITEM_TYPE_INVERT":               2,
		"RTE_FLOW_ITEM_TYPE_ANY":                  3,
		"RTE_FLOW_ITEM_TYPE_PF":                   4,
		"RTE_FLOW_ITEM_TYPE_VF":                   5,
		"RTE_FLOW_ITEM_TYPE_PHY_PORT":             6,
		"RTE_FLOW_ITEM_TYPE_PORT_ID":              7,
		"RTE_FLOW_ITEM_TYPE_RAW":                  8,
		"RTE_FLOW_ITEM_TYPE_ETH":                  9,
		"RTE_FLOW_ITEM_TYPE_VLAN":                 10,
		"RTE_FLOW_ITEM_TYPE_IPV4":                 11,
		"RTE_FLOW_ITEM_TYPE_IPV6":                 12,
		"RTE_FLOW_ITEM_TYPE_ICMP":                 13,
		"RTE_FLOW_ITEM_TYPE_UDP":                  14,
		"RTE_FLOW_ITEM_TYPE_TCP":                  15,
		"RTE_FLOW_ITEM_TYPE_SCTP":                 16,
		"RTE_FLOW_ITEM_TYPE_VXLAN":                17,
		"RTE_FLOW_ITEM_TYPE_E_TAG":                18,
		"RTE_FLOW_ITEM_TYPE_NVGRE":                19,
		"RTE_FLOW_ITEM_TYPE_MPLS":                 20,
		"RTE_FLOW_ITEM_TYPE_GRE":                  21,
		"RTE_FLOW_ITEM_TYPE_FUZZY":                22,
		"RTE_FLOW_ITEM_TYPE_GTP":                  23,
		"RTE_FLOW_ITEM_TYPE_GTPC":                 24,
		"RTE_FLOW_ITEM_TYPE_GTPU":                 25,
		"RTE_FLOW_ITEM_TYPE_ESP":                  26,
		"RTE_FLOW_ITEM_TYPE_GENEVE":               27,
		"RTE_FLOW_ITEM_TYPE_VXLAN_GPE":            28,
		"RTE_FLOW_ITEM_TYPE_ARP_ETH_IPV4":         29,
		"RTE_FLOW_ITEM_TYPE_IPV6_EXT":             30,
		"RTE_FLOW_ITEM_TYPE_ICMP6":                31,
		"RTE_FLOW_ITEM_TYPE_ICMP6_ND_NS":          32,
		"RTE_FLOW_ITEM_TYPE_ICMP6_ND_NA":          33,
		"RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT":         34,
		"RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_SLA_ETH": 35,
		"RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_TLA_ETH": 36,
		"RTE_FLOW_ITEM_TYPE_MARK":                 37,
		"RTE_FLOW_ITEM_TYPE_META":                 38,
		"RTE_FLOW_ITEM_TYPE_GRE_KEY":              39,
		"RTE_FLOW_ITEM_TYPE_GTP_PSC":              40,
		"RTE_FLOW_ITEM_TYPE_PPPOES":               41,
		"RTE_FLOW_ITEM_TYPE_PPPOED":               42,
		"RTE_FLOW_ITEM_TYPE_PPPOE_PROTO_ID":       43,
		"RTE_FLOW_ITEM_TYPE_NSH":                  44,
		"RTE_FLOW_ITEM_TYPE_IGMP":                 45,
		"RTE_FLOW_ITEM_TYPE_AH":                   46,
		"RTE_FLOW_ITEM_TYPE_HIGIG2":               47,
		"RTE_FLOW_ITEM_TYPE_TAG":                  48,
	}
)

func (x RteFlowItemType) Enum() *RteFlowItemType {
	p := new(RteFlowItemType)
	*p = x
	return p
}

func (x RteFlowItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RteFlowItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes[0].Descriptor()
}

func (RteFlowItemType) Type() protoreflect.EnumType {
	return &file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes[0]
}

func (x RteFlowItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RteFlowItemType.Descriptor instead.
func (RteFlowItemType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{0}
}

type RteEthHashFunction int32

const (
	RteEthHashFunction_RTE_ETH_HASH_FUNCTION_DEFAULT    RteEthHashFunction = 0
	RteEthHashFunction_RTE_ETH_HASH_FUNCTION_TOEPLITZ   RteEthHashFunction = 1 //*< Toeplitz
	RteEthHashFunction_RTE_ETH_HASH_FUNCTION_SIMPLE_XOR RteEthHashFunction = 2 //*< Simple XOR
	//*
	// Symmetric Toeplitz: src, dst will be replaced by
	// xor(src, dst). For the case with src/dst only,
	// src or dst address will xor with zero pair.
	RteEthHashFunction_RTE_ETH_HASH_FUNCTION_SYMMETRIC_TOEPLITZ RteEthHashFunction = 3
	RteEthHashFunction_RTE_ETH_HASH_FUNCTION_MAX                RteEthHashFunction = 4
)

// Enum value maps for RteEthHashFunction.
var (
	RteEthHashFunction_name = map[int32]string{
		0: "RTE_ETH_HASH_FUNCTION_DEFAULT",
		1: "RTE_ETH_HASH_FUNCTION_TOEPLITZ",
		2: "RTE_ETH_HASH_FUNCTION_SIMPLE_XOR",
		3: "RTE_ETH_HASH_FUNCTION_SYMMETRIC_TOEPLITZ",
		4: "RTE_ETH_HASH_FUNCTION_MAX",
	}
	RteEthHashFunction_value = map[string]int32{
		"RTE_ETH_HASH_FUNCTION_DEFAULT":            0,
		"RTE_ETH_HASH_FUNCTION_TOEPLITZ":           1,
		"RTE_ETH_HASH_FUNCTION_SIMPLE_XOR":         2,
		"RTE_ETH_HASH_FUNCTION_SYMMETRIC_TOEPLITZ": 3,
		"RTE_ETH_HASH_FUNCTION_MAX":                4,
	}
)

func (x RteEthHashFunction) Enum() *RteEthHashFunction {
	p := new(RteEthHashFunction)
	*p = x
	return p
}

func (x RteEthHashFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RteEthHashFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes[1].Descriptor()
}

func (RteEthHashFunction) Type() protoreflect.EnumType {
	return &file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes[1]
}

func (x RteEthHashFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RteEthHashFunction.Descriptor instead.
func (RteEthHashFunction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{1}
}

type RteFlowActionType int32

const (
	//*
	// End marker for action lists. Prevents further processing of
	// actions; thereby ending the list.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_END RteFlowActionType = 0
	//*
	// Used as a placeholder for convenience. It is ignored and simply
	// discarded by PMDs.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_VOID RteFlowActionType = 1
	//*
	// Leaves traffic up for additional processing by subsequent flow
	// rules; makes a flow rule non-terminating.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_PASSTHRU RteFlowActionType = 2
	//*
	// RTE_FLOW_ACTION_TYPE_JUMP
	//
	// Redirects packets to a group on the current device.
	//
	// See message rte_flow_action_jump.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_JUMP RteFlowActionType = 3
	//*
	// Attaches an integer value to packets and sets PKT_RX_FDIR and
	// PKT_RX_FDIR_ID mbuf flags.
	//
	// See message rte_flow_action_mark.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_MARK RteFlowActionType = 4
	//*
	// Flags packets. Similar to MARK without a specific value; only
	// sets the PKT_RX_FDIR mbuf flag.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_FLAG RteFlowActionType = 5
	//*
	// Assigns packets to a given queue index.
	//
	// See message rte_flow_action_queue.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_QUEUE RteFlowActionType = 6
	//*
	// Drops packets.
	//
	// PASSTHRU overrides this action if both are specified.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_DROP RteFlowActionType = 7
	//*
	// Enables counters for this flow rule.
	//
	// These counters can be retrieved and reset through rte_flow_query();
	// see message rte_flow_query_count.
	//
	// See message rte_flow_action_count.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_COUNT RteFlowActionType = 8
	//*
	// Similar to QUEUE; except RSS is additionally performed on packets
	// to spread them among several queues according to the provided
	// parameters.
	//
	// See message rte_flow_action_rss.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_RSS RteFlowActionType = 9
	//*
	// Directs matching traffic to the physical function (PF) of the
	// current device.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_PF RteFlowActionType = 10
	//*
	// Directs matching traffic to a given virtual function of the
	// current device.
	//
	// See message rte_flow_action_vf.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_VF RteFlowActionType = 11
	//*
	// Directs packets to a given physical port index of the underlying
	// device.
	//
	// See message rte_flow_action_phy_port.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_PHY_PORT RteFlowActionType = 12
	//*
	// Directs matching traffic to a given DPDK port ID.
	//
	// See message rte_flow_action_port_id.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_PORT_ID RteFlowActionType = 13
	//*
	// Traffic metering and policing (MTR).
	//
	// See message rte_flow_action_meter.
	// See file rte_mtr.h for MTR object configuration.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_METER RteFlowActionType = 14
	//*
	// Redirects packets to security engine of current device for security
	// processing as specified by security session.
	//
	// See message rte_flow_action_security.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SECURITY RteFlowActionType = 15
	//*
	// Implements OFPAT_SET_MPLS_TTL ("MPLS TTL") as defined by the
	// OpenFlow Switch Specification.
	//
	// See message rte_flow_action_of_set_mpls_ttl.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_SET_MPLS_TTL RteFlowActionType = 16
	//*
	// Implements OFPAT_DEC_MPLS_TTL ("decrement MPLS TTL") as defined
	// by the OpenFlow Switch Specification.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_DEC_MPLS_TTL RteFlowActionType = 17
	//*
	// Implements OFPAT_SET_NW_TTL ("IP TTL") as defined by the OpenFlow
	// Switch Specification.
	//
	// See message rte_flow_action_of_set_nw_ttl.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_SET_NW_TTL RteFlowActionType = 18
	//*
	// Implements OFPAT_DEC_NW_TTL ("decrement IP TTL") as defined by
	// the OpenFlow Switch Specification.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_DEC_NW_TTL RteFlowActionType = 19
	//*
	// Implements OFPAT_COPY_TTL_OUT ("copy TTL "outwards" -- from
	// next-to-outermost to outermost") as defined by the OpenFlow
	// Switch Specification.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_OUT RteFlowActionType = 20
	//*
	// Implements OFPAT_COPY_TTL_IN ("copy TTL "inwards" -- from
	// outermost to next-to-outermost") as defined by the OpenFlow
	// Switch Specification.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_IN RteFlowActionType = 21
	//*
	// Implements OFPAT_POP_VLAN ("pop the outer VLAN tag") as defined
	// by the OpenFlow Switch Specification.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_POP_VLAN RteFlowActionType = 22
	//*
	// Implements OFPAT_PUSH_VLAN ("push a new VLAN tag") as defined by
	// the OpenFlow Switch Specification.
	//
	// See message rte_flow_action_of_push_vlan.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_PUSH_VLAN RteFlowActionType = 23
	//*
	// Implements OFPAT_SET_VLAN_VID ("set the 802.1q VLAN id") as
	// defined by the OpenFlow Switch Specification.
	//
	// See message rte_flow_action_of_set_vlan_vid.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_VID RteFlowActionType = 24
	//*
	// Implements OFPAT_SET_LAN_PCP ("set the 802.1q priority") as
	// defined by the OpenFlow Switch Specification.
	//
	// See message rte_flow_action_of_set_vlan_pcp.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_PCP RteFlowActionType = 25
	//*
	// Implements OFPAT_POP_MPLS ("pop the outer MPLS tag") as defined
	// by the OpenFlow Switch Specification.
	//
	// See message rte_flow_action_of_pop_mpls.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_POP_MPLS RteFlowActionType = 26
	//*
	// Implements OFPAT_PUSH_MPLS ("push a new MPLS tag") as defined by
	// the OpenFlow Switch Specification.
	//
	// See message rte_flow_action_of_push_mpls.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_OF_PUSH_MPLS RteFlowActionType = 27
	//*
	// Encapsulate flow in VXLAN tunnel as defined in
	// rte_flow_action_vxlan_encap action messageure.
	//
	// See message rte_flow_action_vxlan_encap.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_VXLAN_ENCAP RteFlowActionType = 28
	//*
	// Decapsulate outer most VXLAN tunnel from matched flow.
	//
	// If flow pattern does not define a valid VXLAN tunnel (as specified by
	// RFC7348) then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION
	// error.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_VXLAN_DECAP RteFlowActionType = 29
	//*
	// Encapsulate flow in NVGRE tunnel defined in the
	// rte_flow_action_nvgre_encap action messageure.
	//
	// See message rte_flow_action_nvgre_encap.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_NVGRE_ENCAP RteFlowActionType = 30
	//*
	// Decapsulate outer most NVGRE tunnel from matched flow.
	//
	// If flow pattern does not define a valid NVGRE tunnel (as specified by
	// RFC7637) then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION
	// error.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_NVGRE_DECAP RteFlowActionType = 31
	//*
	// Add outer header whose template is provided in its data buffer
	//
	// See message rte_flow_action_raw_encap.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_RAW_ENCAP RteFlowActionType = 32
	//*
	// Remove outer header whose template is provided in its data buffer.
	//
	// See message rte_flow_action_raw_decap
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_RAW_DECAP RteFlowActionType = 33
	//*
	// Modify IPv4 source address in the outermost IPv4 header.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV4;
	// then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// See message rte_flow_action_set_ipv4.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_IPV4_SRC RteFlowActionType = 34
	//*
	// Modify IPv4 destination address in the outermost IPv4 header.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV4;
	// then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// See message rte_flow_action_set_ipv4.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_IPV4_DST RteFlowActionType = 35
	//*
	// Modify IPv6 source address in the outermost IPv6 header.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV6;
	// then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// See message rte_flow_action_set_ipv6.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_IPV6_SRC RteFlowActionType = 36
	//*
	// Modify IPv6 destination address in the outermost IPv6 header.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV6;
	// then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// See message rte_flow_action_set_ipv6.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_IPV6_DST RteFlowActionType = 37
	//*
	// Modify source port number in the outermost TCP/UDP header.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_TCP
	// or RTE_FLOW_ITEM_TYPE_UDP; then the PMD should return a
	// RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// See message rte_flow_action_set_tp.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_TP_SRC RteFlowActionType = 38
	//*
	// Modify destination port number in the outermost TCP/UDP header.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_TCP
	// or RTE_FLOW_ITEM_TYPE_UDP; then the PMD should return a
	// RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// See message rte_flow_action_set_tp.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_TP_DST RteFlowActionType = 39
	//*
	// Swap the source and destination MAC addresses in the outermost
	// Ethernet header.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	// then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_MAC_SWAP RteFlowActionType = 40
	//*
	// Decrease TTL value directly
	//
	// No associated configuration messageure.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_DEC_TTL RteFlowActionType = 41
	//*
	// Set TTL value
	//
	// See message rte_flow_action_set_ttl
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_TTL RteFlowActionType = 42
	//*
	// Set source MAC address from matched flow.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	// the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// See message rte_flow_action_set_mac.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_MAC_SRC RteFlowActionType = 43
	//*
	// Set destination MAC address from matched flow.
	//
	// If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	// the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	//
	// See message rte_flow_action_set_mac.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_MAC_DST RteFlowActionType = 44
	//*
	// Increase sequence number in the outermost TCP header.
	//
	// Action configuration specifies the value to increase
	// TCP sequence number as a big-endian 32 bit integer.
	//
	// @p conf type:
	// @code rte_be32_t * @endcode
	//
	// Using this action on non-matching traffic will result in
	// undefined behavior.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_INC_TCP_SEQ RteFlowActionType = 45
	//*
	// Decrease sequence number in the outermost TCP header.
	//
	// Action configuration specifies the value to decrease
	// TCP sequence number as a big-endian 32 bit integer.
	//
	// @p conf type:
	// @code rte_be32_t * @endcode
	//
	// Using this action on non-matching traffic will result in
	// undefined behavior.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_DEC_TCP_SEQ RteFlowActionType = 46
	//*
	// Increase acknowledgment number in the outermost TCP header.
	//
	// Action configuration specifies the value to increase
	// TCP acknowledgment number as a big-endian 32 bit integer.
	//
	// @p conf type:
	// @code rte_be32_t * @endcode
	//
	// Using this action on non-matching traffic will result in
	// undefined behavior.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_INC_TCP_ACK RteFlowActionType = 47
	//*
	// Decrease acknowledgment number in the outermost TCP header.
	//
	// Action configuration specifies the value to decrease
	// TCP acknowledgment number as a big-endian 32 bit integer.
	//
	// @p conf type:
	// @code rte_be32_t * @endcode
	//
	// Using this action on non-matching traffic will result in
	// undefined behavior.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_DEC_TCP_ACK RteFlowActionType = 48
	//*
	// Set Tag.
	//
	// Tag is for internal flow usage only and
	// is not delivered to the application.
	//
	// See message rte_flow_action_set_tag.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_TAG RteFlowActionType = 49
	//*
	// Set metadata on ingress or egress path.
	//
	// See message rte_flow_action_set_meta.
	RteFlowActionType_RTE_FLOW_ACTION_TYPE_SET_META RteFlowActionType = 50
)

// Enum value maps for RteFlowActionType.
var (
	RteFlowActionType_name = map[int32]string{
		0:  "RTE_FLOW_ACTION_TYPE_END",
		1:  "RTE_FLOW_ACTION_TYPE_VOID",
		2:  "RTE_FLOW_ACTION_TYPE_PASSTHRU",
		3:  "RTE_FLOW_ACTION_TYPE_JUMP",
		4:  "RTE_FLOW_ACTION_TYPE_MARK",
		5:  "RTE_FLOW_ACTION_TYPE_FLAG",
		6:  "RTE_FLOW_ACTION_TYPE_QUEUE",
		7:  "RTE_FLOW_ACTION_TYPE_DROP",
		8:  "RTE_FLOW_ACTION_TYPE_COUNT",
		9:  "RTE_FLOW_ACTION_TYPE_RSS",
		10: "RTE_FLOW_ACTION_TYPE_PF",
		11: "RTE_FLOW_ACTION_TYPE_VF",
		12: "RTE_FLOW_ACTION_TYPE_PHY_PORT",
		13: "RTE_FLOW_ACTION_TYPE_PORT_ID",
		14: "RTE_FLOW_ACTION_TYPE_METER",
		15: "RTE_FLOW_ACTION_TYPE_SECURITY",
		16: "RTE_FLOW_ACTION_TYPE_OF_SET_MPLS_TTL",
		17: "RTE_FLOW_ACTION_TYPE_OF_DEC_MPLS_TTL",
		18: "RTE_FLOW_ACTION_TYPE_OF_SET_NW_TTL",
		19: "RTE_FLOW_ACTION_TYPE_OF_DEC_NW_TTL",
		20: "RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_OUT",
		21: "RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_IN",
		22: "RTE_FLOW_ACTION_TYPE_OF_POP_VLAN",
		23: "RTE_FLOW_ACTION_TYPE_OF_PUSH_VLAN",
		24: "RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_VID",
		25: "RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_PCP",
		26: "RTE_FLOW_ACTION_TYPE_OF_POP_MPLS",
		27: "RTE_FLOW_ACTION_TYPE_OF_PUSH_MPLS",
		28: "RTE_FLOW_ACTION_TYPE_VXLAN_ENCAP",
		29: "RTE_FLOW_ACTION_TYPE_VXLAN_DECAP",
		30: "RTE_FLOW_ACTION_TYPE_NVGRE_ENCAP",
		31: "RTE_FLOW_ACTION_TYPE_NVGRE_DECAP",
		32: "RTE_FLOW_ACTION_TYPE_RAW_ENCAP",
		33: "RTE_FLOW_ACTION_TYPE_RAW_DECAP",
		34: "RTE_FLOW_ACTION_TYPE_SET_IPV4_SRC",
		35: "RTE_FLOW_ACTION_TYPE_SET_IPV4_DST",
		36: "RTE_FLOW_ACTION_TYPE_SET_IPV6_SRC",
		37: "RTE_FLOW_ACTION_TYPE_SET_IPV6_DST",
		38: "RTE_FLOW_ACTION_TYPE_SET_TP_SRC",
		39: "RTE_FLOW_ACTION_TYPE_SET_TP_DST",
		40: "RTE_FLOW_ACTION_TYPE_MAC_SWAP",
		41: "RTE_FLOW_ACTION_TYPE_DEC_TTL",
		42: "RTE_FLOW_ACTION_TYPE_SET_TTL",
		43: "RTE_FLOW_ACTION_TYPE_SET_MAC_SRC",
		44: "RTE_FLOW_ACTION_TYPE_SET_MAC_DST",
		45: "RTE_FLOW_ACTION_TYPE_INC_TCP_SEQ",
		46: "RTE_FLOW_ACTION_TYPE_DEC_TCP_SEQ",
		47: "RTE_FLOW_ACTION_TYPE_INC_TCP_ACK",
		48: "RTE_FLOW_ACTION_TYPE_DEC_TCP_ACK",
		49: "RTE_FLOW_ACTION_TYPE_SET_TAG",
		50: "RTE_FLOW_ACTION_TYPE_SET_META",
	}
	RteFlowActionType_value = map[string]int32{
		"RTE_FLOW_ACTION_TYPE_END":             0,
		"RTE_FLOW_ACTION_TYPE_VOID":            1,
		"RTE_FLOW_ACTION_TYPE_PASSTHRU":        2,
		"RTE_FLOW_ACTION_TYPE_JUMP":            3,
		"RTE_FLOW_ACTION_TYPE_MARK":            4,
		"RTE_FLOW_ACTION_TYPE_FLAG":            5,
		"RTE_FLOW_ACTION_TYPE_QUEUE":           6,
		"RTE_FLOW_ACTION_TYPE_DROP":            7,
		"RTE_FLOW_ACTION_TYPE_COUNT":           8,
		"RTE_FLOW_ACTION_TYPE_RSS":             9,
		"RTE_FLOW_ACTION_TYPE_PF":              10,
		"RTE_FLOW_ACTION_TYPE_VF":              11,
		"RTE_FLOW_ACTION_TYPE_PHY_PORT":        12,
		"RTE_FLOW_ACTION_TYPE_PORT_ID":         13,
		"RTE_FLOW_ACTION_TYPE_METER":           14,
		"RTE_FLOW_ACTION_TYPE_SECURITY":        15,
		"RTE_FLOW_ACTION_TYPE_OF_SET_MPLS_TTL": 16,
		"RTE_FLOW_ACTION_TYPE_OF_DEC_MPLS_TTL": 17,
		"RTE_FLOW_ACTION_TYPE_OF_SET_NW_TTL":   18,
		"RTE_FLOW_ACTION_TYPE_OF_DEC_NW_TTL":   19,
		"RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_OUT": 20,
		"RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_IN":  21,
		"RTE_FLOW_ACTION_TYPE_OF_POP_VLAN":     22,
		"RTE_FLOW_ACTION_TYPE_OF_PUSH_VLAN":    23,
		"RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_VID": 24,
		"RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_PCP": 25,
		"RTE_FLOW_ACTION_TYPE_OF_POP_MPLS":     26,
		"RTE_FLOW_ACTION_TYPE_OF_PUSH_MPLS":    27,
		"RTE_FLOW_ACTION_TYPE_VXLAN_ENCAP":     28,
		"RTE_FLOW_ACTION_TYPE_VXLAN_DECAP":     29,
		"RTE_FLOW_ACTION_TYPE_NVGRE_ENCAP":     30,
		"RTE_FLOW_ACTION_TYPE_NVGRE_DECAP":     31,
		"RTE_FLOW_ACTION_TYPE_RAW_ENCAP":       32,
		"RTE_FLOW_ACTION_TYPE_RAW_DECAP":       33,
		"RTE_FLOW_ACTION_TYPE_SET_IPV4_SRC":    34,
		"RTE_FLOW_ACTION_TYPE_SET_IPV4_DST":    35,
		"RTE_FLOW_ACTION_TYPE_SET_IPV6_SRC":    36,
		"RTE_FLOW_ACTION_TYPE_SET_IPV6_DST":    37,
		"RTE_FLOW_ACTION_TYPE_SET_TP_SRC":      38,
		"RTE_FLOW_ACTION_TYPE_SET_TP_DST":      39,
		"RTE_FLOW_ACTION_TYPE_MAC_SWAP":        40,
		"RTE_FLOW_ACTION_TYPE_DEC_TTL":         41,
		"RTE_FLOW_ACTION_TYPE_SET_TTL":         42,
		"RTE_FLOW_ACTION_TYPE_SET_MAC_SRC":     43,
		"RTE_FLOW_ACTION_TYPE_SET_MAC_DST":     44,
		"RTE_FLOW_ACTION_TYPE_INC_TCP_SEQ":     45,
		"RTE_FLOW_ACTION_TYPE_DEC_TCP_SEQ":     46,
		"RTE_FLOW_ACTION_TYPE_INC_TCP_ACK":     47,
		"RTE_FLOW_ACTION_TYPE_DEC_TCP_ACK":     48,
		"RTE_FLOW_ACTION_TYPE_SET_TAG":         49,
		"RTE_FLOW_ACTION_TYPE_SET_META":        50,
	}
)

func (x RteFlowActionType) Enum() *RteFlowActionType {
	p := new(RteFlowActionType)
	*p = x
	return p
}

func (x RteFlowActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RteFlowActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes[2].Descriptor()
}

func (RteFlowActionType) Type() protoreflect.EnumType {
	return &file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes[2]
}

func (x RteFlowActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RteFlowActionType.Descriptor instead.
func (RteFlowActionType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{2}
}

type RteFlowErrorType int32

const (
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_NONE          RteFlowErrorType = 0  //*< No error.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_UNSPECIFIED   RteFlowErrorType = 1  //*< Cause unspecified.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_HANDLE        RteFlowErrorType = 2  //*< Flow rule (handle).
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ATTR_GROUP    RteFlowErrorType = 3  //*< Group field.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ATTR_PRIORITY RteFlowErrorType = 4  //*< Priority field.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ATTR_INGRESS  RteFlowErrorType = 5  //*< Ingress field.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ATTR_EGRESS   RteFlowErrorType = 6  //*< Egress field.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ATTR_TRANSFER RteFlowErrorType = 7  //*< Transfer field.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ATTR          RteFlowErrorType = 8  //*< Attributes structure.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ITEM_NUM      RteFlowErrorType = 9  //*< Pattern length.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ITEM_SPEC     RteFlowErrorType = 10 //*< Item specification.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ITEM_LAST     RteFlowErrorType = 11 //*< Item specification range.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ITEM_MASK     RteFlowErrorType = 12 //*< Item specification mask.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ITEM          RteFlowErrorType = 13 //*< Specific pattern item.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ACTION_NUM    RteFlowErrorType = 14 //*< Number of actions.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ACTION_CONF   RteFlowErrorType = 15 //*< Action configuration.
	RteFlowErrorType_RTE_FLOW_ERROR_TYPE_ACTION        RteFlowErrorType = 16 //*< Specific action.
)

// Enum value maps for RteFlowErrorType.
var (
	RteFlowErrorType_name = map[int32]string{
		0:  "RTE_FLOW_ERROR_TYPE_NONE",
		1:  "RTE_FLOW_ERROR_TYPE_UNSPECIFIED",
		2:  "RTE_FLOW_ERROR_TYPE_HANDLE",
		3:  "RTE_FLOW_ERROR_TYPE_ATTR_GROUP",
		4:  "RTE_FLOW_ERROR_TYPE_ATTR_PRIORITY",
		5:  "RTE_FLOW_ERROR_TYPE_ATTR_INGRESS",
		6:  "RTE_FLOW_ERROR_TYPE_ATTR_EGRESS",
		7:  "RTE_FLOW_ERROR_TYPE_ATTR_TRANSFER",
		8:  "RTE_FLOW_ERROR_TYPE_ATTR",
		9:  "RTE_FLOW_ERROR_TYPE_ITEM_NUM",
		10: "RTE_FLOW_ERROR_TYPE_ITEM_SPEC",
		11: "RTE_FLOW_ERROR_TYPE_ITEM_LAST",
		12: "RTE_FLOW_ERROR_TYPE_ITEM_MASK",
		13: "RTE_FLOW_ERROR_TYPE_ITEM",
		14: "RTE_FLOW_ERROR_TYPE_ACTION_NUM",
		15: "RTE_FLOW_ERROR_TYPE_ACTION_CONF",
		16: "RTE_FLOW_ERROR_TYPE_ACTION",
	}
	RteFlowErrorType_value = map[string]int32{
		"RTE_FLOW_ERROR_TYPE_NONE":          0,
		"RTE_FLOW_ERROR_TYPE_UNSPECIFIED":   1,
		"RTE_FLOW_ERROR_TYPE_HANDLE":        2,
		"RTE_FLOW_ERROR_TYPE_ATTR_GROUP":    3,
		"RTE_FLOW_ERROR_TYPE_ATTR_PRIORITY": 4,
		"RTE_FLOW_ERROR_TYPE_ATTR_INGRESS":  5,
		"RTE_FLOW_ERROR_TYPE_ATTR_EGRESS":   6,
		"RTE_FLOW_ERROR_TYPE_ATTR_TRANSFER": 7,
		"RTE_FLOW_ERROR_TYPE_ATTR":          8,
		"RTE_FLOW_ERROR_TYPE_ITEM_NUM":      9,
		"RTE_FLOW_ERROR_TYPE_ITEM_SPEC":     10,
		"RTE_FLOW_ERROR_TYPE_ITEM_LAST":     11,
		"RTE_FLOW_ERROR_TYPE_ITEM_MASK":     12,
		"RTE_FLOW_ERROR_TYPE_ITEM":          13,
		"RTE_FLOW_ERROR_TYPE_ACTION_NUM":    14,
		"RTE_FLOW_ERROR_TYPE_ACTION_CONF":   15,
		"RTE_FLOW_ERROR_TYPE_ACTION":        16,
	}
)

func (x RteFlowErrorType) Enum() *RteFlowErrorType {
	p := new(RteFlowErrorType)
	*p = x
	return p
}

func (x RteFlowErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RteFlowErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes[3].Descriptor()
}

func (RteFlowErrorType) Type() protoreflect.EnumType {
	return &file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes[3]
}

func (x RteFlowErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RteFlowErrorType.Descriptor instead.
func (RteFlowErrorType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{3}
}

type RteFlowAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    uint32 `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Priority uint32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Ingress  uint32 `protobuf:"varint,3,opt,name=ingress,proto3" json:"ingress,omitempty"`
	Egress   uint32 `protobuf:"varint,4,opt,name=egress,proto3" json:"egress,omitempty"`
	Transfer uint32 `protobuf:"varint,5,opt,name=transfer,proto3" json:"transfer,omitempty"`
	Reserved uint32 `protobuf:"varint,6,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *RteFlowAttr) Reset() {
	*x = RteFlowAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowAttr) ProtoMessage() {}

func (x *RteFlowAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowAttr.ProtoReflect.Descriptor instead.
func (*RteFlowAttr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{0}
}

func (x *RteFlowAttr) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *RteFlowAttr) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RteFlowAttr) GetIngress() uint32 {
	if x != nil {
		return x.Ingress
	}
	return 0
}

func (x *RteFlowAttr) GetEgress() uint32 {
	if x != nil {
		return x.Egress
	}
	return 0
}

func (x *RteFlowAttr) GetTransfer() uint32 {
	if x != nil {
		return x.Transfer
	}
	return 0
}

func (x *RteFlowAttr) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

type GreKeyDefaultMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GreKeyDefaultMask uint32 `protobuf:"varint,1,opt,name=gre_key_default_mask,json=greKeyDefaultMask,proto3" json:"gre_key_default_mask,omitempty"`
}

func (x *GreKeyDefaultMask) Reset() {
	*x = GreKeyDefaultMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreKeyDefaultMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreKeyDefaultMask) ProtoMessage() {}

func (x *GreKeyDefaultMask) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreKeyDefaultMask.ProtoReflect.Descriptor instead.
func (*GreKeyDefaultMask) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{1}
}

func (x *GreKeyDefaultMask) GetGreKeyDefaultMask() uint32 {
	if x != nil {
		return x.GreKeyDefaultMask
	}
	return 0
}

type RteFlowItemAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num uint32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"` //*< Number of layers covered.
}

func (x *RteFlowItemAny) Reset() {
	*x = RteFlowItemAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemAny) ProtoMessage() {}

func (x *RteFlowItemAny) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemAny.ProtoReflect.Descriptor instead.
func (*RteFlowItemAny) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{2}
}

func (x *RteFlowItemAny) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type RteFlowItemVf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //*< VF ID.
}

func (x *RteFlowItemVf) Reset() {
	*x = RteFlowItemVf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemVf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemVf) ProtoMessage() {}

func (x *RteFlowItemVf) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemVf.ProtoReflect.Descriptor instead.
func (*RteFlowItemVf) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{3}
}

func (x *RteFlowItemVf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RteFlowItemPhyPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` //*< Physical port index.
}

func (x *RteFlowItemPhyPort) Reset() {
	*x = RteFlowItemPhyPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemPhyPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemPhyPort) ProtoMessage() {}

func (x *RteFlowItemPhyPort) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemPhyPort.ProtoReflect.Descriptor instead.
func (*RteFlowItemPhyPort) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{4}
}

func (x *RteFlowItemPhyPort) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RteFlowItemPortId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //*< DPDK port ID.
}

func (x *RteFlowItemPortId) Reset() {
	*x = RteFlowItemPortId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemPortId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemPortId) ProtoMessage() {}

func (x *RteFlowItemPortId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemPortId.ProtoReflect.Descriptor instead.
func (*RteFlowItemPortId) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{5}
}

func (x *RteFlowItemPortId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RteFlowItemRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relative uint32 `protobuf:"varint,1,opt,name=relative,proto3" json:"relative,omitempty"` //*< Look for pattern after the previous item.
	Search   uint32 `protobuf:"varint,2,opt,name=search,proto3" json:"search,omitempty"`     //*< Search pattern from offset (see also limit).
	Reserved uint32 `protobuf:"varint,3,opt,name=reserved,proto3" json:"reserved,omitempty"` //*< Reserved, must be set to zero.
	Offset   int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`     //*< Absolute or relative offset for pattern.
	Limit    uint32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`       //*< Search area limit for start of pattern.
	Length   uint32 `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`     //*< Pattern length.
	Pattern  uint32 `protobuf:"varint,7,opt,name=pattern,proto3" json:"pattern,omitempty"`   //*< Byte string to look for.
}

func (x *RteFlowItemRaw) Reset() {
	*x = RteFlowItemRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemRaw) ProtoMessage() {}

func (x *RteFlowItemRaw) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemRaw.ProtoReflect.Descriptor instead.
func (*RteFlowItemRaw) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{6}
}

func (x *RteFlowItemRaw) GetRelative() uint32 {
	if x != nil {
		return x.Relative
	}
	return 0
}

func (x *RteFlowItemRaw) GetSearch() uint32 {
	if x != nil {
		return x.Search
	}
	return 0
}

func (x *RteFlowItemRaw) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowItemRaw) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RteFlowItemRaw) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RteFlowItemRaw) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RteFlowItemRaw) GetPattern() uint32 {
	if x != nil {
		return x.Pattern
	}
	return 0
}

type RteEtherAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddrBytes []byte `protobuf:"bytes,1,opt,name=addr_bytes,json=addrBytes,proto3" json:"addr_bytes,omitempty"` //*< Addr bytes in tx order
}

func (x *RteEtherAddr) Reset() {
	*x = RteEtherAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteEtherAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteEtherAddr) ProtoMessage() {}

func (x *RteEtherAddr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteEtherAddr.ProtoReflect.Descriptor instead.
func (*RteEtherAddr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{7}
}

func (x *RteEtherAddr) GetAddrBytes() []byte {
	if x != nil {
		return x.AddrBytes
	}
	return nil
}

type RteFlowItemEth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst  *RteEtherAddr `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`    //*< Destination MAC.
	Src  *RteEtherAddr `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`    //*< Source MAC.
	Type uint32        `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` //*< EtherType or TPID.
}

func (x *RteFlowItemEth) Reset() {
	*x = RteFlowItemEth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemEth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemEth) ProtoMessage() {}

func (x *RteFlowItemEth) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemEth.ProtoReflect.Descriptor instead.
func (*RteFlowItemEth) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{8}
}

func (x *RteFlowItemEth) GetDst() *RteEtherAddr {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *RteFlowItemEth) GetSrc() *RteEtherAddr {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *RteFlowItemEth) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type RteFlowItemVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tci       uint32 `protobuf:"varint,1,opt,name=tci,proto3" json:"tci,omitempty"`                              //*< Tag control information.
	InnerType uint32 `protobuf:"varint,2,opt,name=inner_type,json=innerType,proto3" json:"inner_type,omitempty"` //*< Inner EtherType or TPID.
}

func (x *RteFlowItemVlan) Reset() {
	*x = RteFlowItemVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemVlan) ProtoMessage() {}

func (x *RteFlowItemVlan) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemVlan.ProtoReflect.Descriptor instead.
func (*RteFlowItemVlan) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{9}
}

func (x *RteFlowItemVlan) GetTci() uint32 {
	if x != nil {
		return x.Tci
	}
	return 0
}

func (x *RteFlowItemVlan) GetInnerType() uint32 {
	if x != nil {
		return x.InnerType
	}
	return 0
}

type RteIpv4Hdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionIhl     uint32 `protobuf:"varint,1,opt,name=version_ihl,json=versionIhl,proto3" json:"version_ihl,omitempty"`             //*< version and header length
	TypeOfService  uint32 `protobuf:"varint,2,opt,name=type_of_service,json=typeOfService,proto3" json:"type_of_service,omitempty"`  //*< type of service
	TotalLength    uint32 `protobuf:"varint,3,opt,name=total_length,json=totalLength,proto3" json:"total_length,omitempty"`          //*< length of packet
	PacketId       uint32 `protobuf:"varint,4,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`                   //*< packet ID
	FragmentOffset uint32 `protobuf:"varint,5,opt,name=fragment_offset,json=fragmentOffset,proto3" json:"fragment_offset,omitempty"` //*< fragmentation offset
	TimeToLive     uint32 `protobuf:"varint,6,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"`           //*< time to live
	NextProtoId    uint32 `protobuf:"varint,7,opt,name=next_proto_id,json=nextProtoId,proto3" json:"next_proto_id,omitempty"`        //*< protocol ID
	HdrChecksum    uint32 `protobuf:"varint,8,opt,name=hdr_checksum,json=hdrChecksum,proto3" json:"hdr_checksum,omitempty"`          //*< header checksum
	SrcAddr        uint32 `protobuf:"varint,9,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`                      //*< source address
	DstAddr        uint32 `protobuf:"varint,10,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`                     //*< destination address
}

func (x *RteIpv4Hdr) Reset() {
	*x = RteIpv4Hdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteIpv4Hdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteIpv4Hdr) ProtoMessage() {}

func (x *RteIpv4Hdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteIpv4Hdr.ProtoReflect.Descriptor instead.
func (*RteIpv4Hdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{10}
}

func (x *RteIpv4Hdr) GetVersionIhl() uint32 {
	if x != nil {
		return x.VersionIhl
	}
	return 0
}

func (x *RteIpv4Hdr) GetTypeOfService() uint32 {
	if x != nil {
		return x.TypeOfService
	}
	return 0
}

func (x *RteIpv4Hdr) GetTotalLength() uint32 {
	if x != nil {
		return x.TotalLength
	}
	return 0
}

func (x *RteIpv4Hdr) GetPacketId() uint32 {
	if x != nil {
		return x.PacketId
	}
	return 0
}

func (x *RteIpv4Hdr) GetFragmentOffset() uint32 {
	if x != nil {
		return x.FragmentOffset
	}
	return 0
}

func (x *RteIpv4Hdr) GetTimeToLive() uint32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

func (x *RteIpv4Hdr) GetNextProtoId() uint32 {
	if x != nil {
		return x.NextProtoId
	}
	return 0
}

func (x *RteIpv4Hdr) GetHdrChecksum() uint32 {
	if x != nil {
		return x.HdrChecksum
	}
	return 0
}

func (x *RteIpv4Hdr) GetSrcAddr() uint32 {
	if x != nil {
		return x.SrcAddr
	}
	return 0
}

func (x *RteIpv4Hdr) GetDstAddr() uint32 {
	if x != nil {
		return x.DstAddr
	}
	return 0
}

type RteFlowItemIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr *RteIpv4Hdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"` //*< IPv4 header definition.
}

func (x *RteFlowItemIpv4) Reset() {
	*x = RteFlowItemIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIpv4) ProtoMessage() {}

func (x *RteFlowItemIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIpv4.ProtoReflect.Descriptor instead.
func (*RteFlowItemIpv4) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{11}
}

func (x *RteFlowItemIpv4) GetHdr() *RteIpv4Hdr {
	if x != nil {
		return x.Hdr
	}
	return nil
}

type RteIpv6Hdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VtcFlow    uint32 `protobuf:"varint,1,opt,name=vtc_flow,json=vtcFlow,proto3" json:"vtc_flow,omitempty"`          //*< IP version, traffic class & flow label.
	PayloadLen uint32 `protobuf:"varint,2,opt,name=payload_len,json=payloadLen,proto3" json:"payload_len,omitempty"` //*< IP packet length - includes header size
	Proto      uint32 `protobuf:"varint,3,opt,name=proto,proto3" json:"proto,omitempty"`                             //*< Protocol, next header.
	HopLimits  uint32 `protobuf:"varint,4,opt,name=hop_limits,json=hopLimits,proto3" json:"hop_limits,omitempty"`    //*< Hop limits.
	SrcAddr    []byte `protobuf:"bytes,5,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`           //*< IP address of source host.
	DstAddr    []byte `protobuf:"bytes,6,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`           //*< IP address of destination host(s).
}

func (x *RteIpv6Hdr) Reset() {
	*x = RteIpv6Hdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteIpv6Hdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteIpv6Hdr) ProtoMessage() {}

func (x *RteIpv6Hdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteIpv6Hdr.ProtoReflect.Descriptor instead.
func (*RteIpv6Hdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{12}
}

func (x *RteIpv6Hdr) GetVtcFlow() uint32 {
	if x != nil {
		return x.VtcFlow
	}
	return 0
}

func (x *RteIpv6Hdr) GetPayloadLen() uint32 {
	if x != nil {
		return x.PayloadLen
	}
	return 0
}

func (x *RteIpv6Hdr) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *RteIpv6Hdr) GetHopLimits() uint32 {
	if x != nil {
		return x.HopLimits
	}
	return 0
}

func (x *RteIpv6Hdr) GetSrcAddr() []byte {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

func (x *RteIpv6Hdr) GetDstAddr() []byte {
	if x != nil {
		return x.DstAddr
	}
	return nil
}

type RteFlowItemIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr *RteIpv6Hdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"` //*< IPv6 header definition.
}

func (x *RteFlowItemIpv6) Reset() {
	*x = RteFlowItemIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIpv6) ProtoMessage() {}

func (x *RteFlowItemIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIpv6.ProtoReflect.Descriptor instead.
func (*RteFlowItemIpv6) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{13}
}

func (x *RteFlowItemIpv6) GetHdr() *RteIpv6Hdr {
	if x != nil {
		return x.Hdr
	}
	return nil
}

type RteIcmpHdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IcmpType  uint32 `protobuf:"varint,1,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`      // ICMP packet type.
	IcmpCode  uint32 `protobuf:"varint,2,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`      // ICMP packet code.
	IcmpCksum uint32 `protobuf:"varint,3,opt,name=icmp_cksum,json=icmpCksum,proto3" json:"icmp_cksum,omitempty"`   // ICMP packet checksum.
	IcmpIdent uint32 `protobuf:"varint,4,opt,name=icmp_ident,json=icmpIdent,proto3" json:"icmp_ident,omitempty"`   // ICMP packet identifier.
	IcmpSeqNb uint32 `protobuf:"varint,5,opt,name=icmp_seq_nb,json=icmpSeqNb,proto3" json:"icmp_seq_nb,omitempty"` // ICMP packet sequence number.
}

func (x *RteIcmpHdr) Reset() {
	*x = RteIcmpHdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteIcmpHdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteIcmpHdr) ProtoMessage() {}

func (x *RteIcmpHdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteIcmpHdr.ProtoReflect.Descriptor instead.
func (*RteIcmpHdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{14}
}

func (x *RteIcmpHdr) GetIcmpType() uint32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *RteIcmpHdr) GetIcmpCode() uint32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

func (x *RteIcmpHdr) GetIcmpCksum() uint32 {
	if x != nil {
		return x.IcmpCksum
	}
	return 0
}

func (x *RteIcmpHdr) GetIcmpIdent() uint32 {
	if x != nil {
		return x.IcmpIdent
	}
	return 0
}

func (x *RteIcmpHdr) GetIcmpSeqNb() uint32 {
	if x != nil {
		return x.IcmpSeqNb
	}
	return 0
}

type RteFlowItemIcmp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr *RteIcmpHdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"` //*< ICMP header definition.
}

func (x *RteFlowItemIcmp) Reset() {
	*x = RteFlowItemIcmp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIcmp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIcmp) ProtoMessage() {}

func (x *RteFlowItemIcmp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIcmp.ProtoReflect.Descriptor instead.
func (*RteFlowItemIcmp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{15}
}

func (x *RteFlowItemIcmp) GetHdr() *RteIcmpHdr {
	if x != nil {
		return x.Hdr
	}
	return nil
}

type RteUdpHdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPort    uint32 `protobuf:"varint,1,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`          //*< UDP source port.
	DstPort    uint32 `protobuf:"varint,2,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`          //*< UDP destination port.
	DgramLen   uint32 `protobuf:"varint,3,opt,name=dgram_len,json=dgramLen,proto3" json:"dgram_len,omitempty"`       //*< UDP datagram length
	DgramCksum uint32 `protobuf:"varint,4,opt,name=dgram_cksum,json=dgramCksum,proto3" json:"dgram_cksum,omitempty"` //*< UDP datagram checksum
}

func (x *RteUdpHdr) Reset() {
	*x = RteUdpHdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteUdpHdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteUdpHdr) ProtoMessage() {}

func (x *RteUdpHdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteUdpHdr.ProtoReflect.Descriptor instead.
func (*RteUdpHdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{16}
}

func (x *RteUdpHdr) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *RteUdpHdr) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *RteUdpHdr) GetDgramLen() uint32 {
	if x != nil {
		return x.DgramLen
	}
	return 0
}

func (x *RteUdpHdr) GetDgramCksum() uint32 {
	if x != nil {
		return x.DgramCksum
	}
	return 0
}

type RteFlowItemUdp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr *RteUdpHdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"` //*< UDP header definition.
}

func (x *RteFlowItemUdp) Reset() {
	*x = RteFlowItemUdp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemUdp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemUdp) ProtoMessage() {}

func (x *RteFlowItemUdp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemUdp.ProtoReflect.Descriptor instead.
func (*RteFlowItemUdp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{17}
}

func (x *RteFlowItemUdp) GetHdr() *RteUdpHdr {
	if x != nil {
		return x.Hdr
	}
	return nil
}

type RteTcpHdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPort  uint32 `protobuf:"varint,1,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`    //*< TCP source port.
	DstPort  uint32 `protobuf:"varint,2,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`    //*< TCP destination port.
	SentSeq  uint32 `protobuf:"varint,3,opt,name=sent_seq,json=sentSeq,proto3" json:"sent_seq,omitempty"`    //*< TX data sequence number.
	RecvAck  uint32 `protobuf:"varint,4,opt,name=recv_ack,json=recvAck,proto3" json:"recv_ack,omitempty"`    //*< RX data acknowledgment sequence number.
	DataOff  uint32 `protobuf:"varint,5,opt,name=data_off,json=dataOff,proto3" json:"data_off,omitempty"`    //*< Data offset.
	TcpFlags uint32 `protobuf:"varint,6,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"` //*< TCP flags
	RxWin    uint32 `protobuf:"varint,7,opt,name=rx_win,json=rxWin,proto3" json:"rx_win,omitempty"`          //*< RX flow control window.
	Cksum    uint32 `protobuf:"varint,8,opt,name=cksum,proto3" json:"cksum,omitempty"`                       //*< TCP checksum.
	TcpUrp   uint32 `protobuf:"varint,9,opt,name=tcp_urp,json=tcpUrp,proto3" json:"tcp_urp,omitempty"`       //*< TCP urgent pointer, if any.
}

func (x *RteTcpHdr) Reset() {
	*x = RteTcpHdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteTcpHdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteTcpHdr) ProtoMessage() {}

func (x *RteTcpHdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteTcpHdr.ProtoReflect.Descriptor instead.
func (*RteTcpHdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{18}
}

func (x *RteTcpHdr) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *RteTcpHdr) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *RteTcpHdr) GetSentSeq() uint32 {
	if x != nil {
		return x.SentSeq
	}
	return 0
}

func (x *RteTcpHdr) GetRecvAck() uint32 {
	if x != nil {
		return x.RecvAck
	}
	return 0
}

func (x *RteTcpHdr) GetDataOff() uint32 {
	if x != nil {
		return x.DataOff
	}
	return 0
}

func (x *RteTcpHdr) GetTcpFlags() uint32 {
	if x != nil {
		return x.TcpFlags
	}
	return 0
}

func (x *RteTcpHdr) GetRxWin() uint32 {
	if x != nil {
		return x.RxWin
	}
	return 0
}

func (x *RteTcpHdr) GetCksum() uint32 {
	if x != nil {
		return x.Cksum
	}
	return 0
}

func (x *RteTcpHdr) GetTcpUrp() uint32 {
	if x != nil {
		return x.TcpUrp
	}
	return 0
}

type RteFlowItemTcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr *RteTcpHdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"` //*< TCP header definition.
}

func (x *RteFlowItemTcp) Reset() {
	*x = RteFlowItemTcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemTcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemTcp) ProtoMessage() {}

func (x *RteFlowItemTcp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemTcp.ProtoReflect.Descriptor instead.
func (*RteFlowItemTcp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{19}
}

func (x *RteFlowItemTcp) GetHdr() *RteTcpHdr {
	if x != nil {
		return x.Hdr
	}
	return nil
}

type RteSctpHdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPort uint32 `protobuf:"varint,1,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"` //*< Source port.
	DstPort uint32 `protobuf:"varint,2,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"` //*< Destin port.
	Tag     uint32 `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`                        //*< Validation tag.
	Cksum   uint32 `protobuf:"varint,4,opt,name=cksum,proto3" json:"cksum,omitempty"`                    //*< Checksum.
}

func (x *RteSctpHdr) Reset() {
	*x = RteSctpHdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteSctpHdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteSctpHdr) ProtoMessage() {}

func (x *RteSctpHdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteSctpHdr.ProtoReflect.Descriptor instead.
func (*RteSctpHdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{20}
}

func (x *RteSctpHdr) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *RteSctpHdr) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *RteSctpHdr) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *RteSctpHdr) GetCksum() uint32 {
	if x != nil {
		return x.Cksum
	}
	return 0
}

type RteFlowItemSctp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr *RteSctpHdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"` //*< SCTP header definition.
}

func (x *RteFlowItemSctp) Reset() {
	*x = RteFlowItemSctp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemSctp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemSctp) ProtoMessage() {}

func (x *RteFlowItemSctp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemSctp.ProtoReflect.Descriptor instead.
func (*RteFlowItemSctp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{21}
}

func (x *RteFlowItemSctp) GetHdr() *RteSctpHdr {
	if x != nil {
		return x.Hdr
	}
	return nil
}

type RteFlowItemVxlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"` //*< Normally 0x08 (I flag).
	Rsvd0 []byte `protobuf:"bytes,2,opt,name=rsvd0,proto3" json:"rsvd0,omitempty"`  //*< Reserved, normally 0x000000.
	Vni   []byte `protobuf:"bytes,3,opt,name=vni,proto3" json:"vni,omitempty"`      //*< VXLAN identifier.
	Rsvd1 uint32 `protobuf:"varint,4,opt,name=rsvd1,proto3" json:"rsvd1,omitempty"` //*< Reserved, normally 0x00.
}

func (x *RteFlowItemVxlan) Reset() {
	*x = RteFlowItemVxlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemVxlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemVxlan) ProtoMessage() {}

func (x *RteFlowItemVxlan) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemVxlan.ProtoReflect.Descriptor instead.
func (*RteFlowItemVxlan) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{22}
}

func (x *RteFlowItemVxlan) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RteFlowItemVxlan) GetRsvd0() []byte {
	if x != nil {
		return x.Rsvd0
	}
	return nil
}

func (x *RteFlowItemVxlan) GetVni() []byte {
	if x != nil {
		return x.Vni
	}
	return nil
}

func (x *RteFlowItemVxlan) GetRsvd1() uint32 {
	if x != nil {
		return x.Rsvd1
	}
	return 0
}

type RteFlowItemETag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// E-Tag control information (E-TCI).
	// E-PCP (3b), E-DEI (1b), ingress E-CID base (12b).
	EpcpEdeiInEcidB uint32 `protobuf:"varint,1,opt,name=epcp_edei_in_ecid_b,json=epcpEdeiInEcidB,proto3" json:"epcp_edei_in_ecid_b,omitempty"`
	//* Reserved (2b), GRP (2b), E-CID base (12b).
	RsvdGrpEcidB uint32 `protobuf:"varint,2,opt,name=rsvd_grp_ecid_b,json=rsvdGrpEcidB,proto3" json:"rsvd_grp_ecid_b,omitempty"`
	InEcidE      uint32 `protobuf:"varint,3,opt,name=in_ecid_e,json=inEcidE,proto3" json:"in_ecid_e,omitempty"`     //*< Ingress E-CID ext.
	EcidE        uint32 `protobuf:"varint,4,opt,name=ecid_e,json=ecidE,proto3" json:"ecid_e,omitempty"`             //*< E-CID ext.
	InnerType    uint32 `protobuf:"varint,5,opt,name=inner_type,json=innerType,proto3" json:"inner_type,omitempty"` //*< Inner EtherType or TPID.
}

func (x *RteFlowItemETag) Reset() {
	*x = RteFlowItemETag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemETag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemETag) ProtoMessage() {}

func (x *RteFlowItemETag) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemETag.ProtoReflect.Descriptor instead.
func (*RteFlowItemETag) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{23}
}

func (x *RteFlowItemETag) GetEpcpEdeiInEcidB() uint32 {
	if x != nil {
		return x.EpcpEdeiInEcidB
	}
	return 0
}

func (x *RteFlowItemETag) GetRsvdGrpEcidB() uint32 {
	if x != nil {
		return x.RsvdGrpEcidB
	}
	return 0
}

func (x *RteFlowItemETag) GetInEcidE() uint32 {
	if x != nil {
		return x.InEcidE
	}
	return 0
}

func (x *RteFlowItemETag) GetEcidE() uint32 {
	if x != nil {
		return x.EcidE
	}
	return 0
}

func (x *RteFlowItemETag) GetInnerType() uint32 {
	if x != nil {
		return x.InnerType
	}
	return 0
}

type RteFlowItemNvgre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Checksum (1b), undefined (1b), key bit (1b), sequence number (1b),
	// reserved 0 (9b), version (3b).
	//
	// c_k_s_rsvd0_ver must have value 0x2000 according to RFC 7637.
	CKSRsvd0Ver uint32 `protobuf:"varint,1,opt,name=c_k_s_rsvd0_ver,json=cKSRsvd0Ver,proto3" json:"c_k_s_rsvd0_ver,omitempty"`
	Protocol    uint32 `protobuf:"varint,2,opt,name=protocol,proto3" json:"protocol,omitempty"`           //*< Protocol type (0x6558).
	Tni         []byte `protobuf:"bytes,3,opt,name=tni,proto3" json:"tni,omitempty"`                      //*< Virtual subnet ID.
	FlowId      uint32 `protobuf:"varint,4,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` //*< Flow ID.
}

func (x *RteFlowItemNvgre) Reset() {
	*x = RteFlowItemNvgre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemNvgre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemNvgre) ProtoMessage() {}

func (x *RteFlowItemNvgre) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemNvgre.ProtoReflect.Descriptor instead.
func (*RteFlowItemNvgre) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{24}
}

func (x *RteFlowItemNvgre) GetCKSRsvd0Ver() uint32 {
	if x != nil {
		return x.CKSRsvd0Ver
	}
	return 0
}

func (x *RteFlowItemNvgre) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *RteFlowItemNvgre) GetTni() []byte {
	if x != nil {
		return x.Tni
	}
	return nil
}

func (x *RteFlowItemNvgre) GetFlowId() uint32 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

type RteFlowItemMpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Label (20b), TC (3b), Bottom of Stack (1b).
	LabelTcS []byte `protobuf:"bytes,1,opt,name=label_tc_s,json=labelTcS,proto3" json:"label_tc_s,omitempty"`
	Ttl      uint32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"` //* Time-to-Live.
}

func (x *RteFlowItemMpls) Reset() {
	*x = RteFlowItemMpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemMpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemMpls) ProtoMessage() {}

func (x *RteFlowItemMpls) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemMpls.ProtoReflect.Descriptor instead.
func (*RteFlowItemMpls) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{25}
}

func (x *RteFlowItemMpls) GetLabelTcS() []byte {
	if x != nil {
		return x.LabelTcS
	}
	return nil
}

func (x *RteFlowItemMpls) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type RteFlowItemGre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Checksum (1b), reserved 0 (12b), version (3b).
	// Refer to RFC 2784.
	CRsvd0Ver uint32 `protobuf:"varint,1,opt,name=c_rsvd0_ver,json=cRsvd0Ver,proto3" json:"c_rsvd0_ver,omitempty"`
	Protocol  uint32 `protobuf:"varint,2,opt,name=protocol,proto3" json:"protocol,omitempty"` //*< Protocol type.
}

func (x *RteFlowItemGre) Reset() {
	*x = RteFlowItemGre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemGre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemGre) ProtoMessage() {}

func (x *RteFlowItemGre) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemGre.ProtoReflect.Descriptor instead.
func (*RteFlowItemGre) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{26}
}

func (x *RteFlowItemGre) GetCRsvd0Ver() uint32 {
	if x != nil {
		return x.CRsvd0Ver
	}
	return 0
}

func (x *RteFlowItemGre) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

type RteFlowItemFuzzy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thresh uint32 `protobuf:"varint,1,opt,name=thresh,proto3" json:"thresh,omitempty"` //*< Accuracy threshold.
}

func (x *RteFlowItemFuzzy) Reset() {
	*x = RteFlowItemFuzzy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemFuzzy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemFuzzy) ProtoMessage() {}

func (x *RteFlowItemFuzzy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemFuzzy.ProtoReflect.Descriptor instead.
func (*RteFlowItemFuzzy) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{27}
}

func (x *RteFlowItemFuzzy) GetThresh() uint32 {
	if x != nil {
		return x.Thresh
	}
	return 0
}

type RteFlowItemGtp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Version (3b), protocol type (1b), reserved (1b),
	// Extension header flag (1b),
	// Sequence number flag (1b),
	// N-PDU number flag (1b).
	VPtRsvFlags uint32 `protobuf:"varint,1,opt,name=v_pt_rsv_flags,json=vPtRsvFlags,proto3" json:"v_pt_rsv_flags,omitempty"`
	MsgType     uint32 `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"` //*< Message type.
	MsgLen      uint32 `protobuf:"varint,3,opt,name=msg_len,json=msgLen,proto3" json:"msg_len,omitempty"`    //*< Message length.
	Teid        uint32 `protobuf:"varint,4,opt,name=teid,proto3" json:"teid,omitempty"`                      //*< Tunnel endpoint identifier.
}

func (x *RteFlowItemGtp) Reset() {
	*x = RteFlowItemGtp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemGtp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemGtp) ProtoMessage() {}

func (x *RteFlowItemGtp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemGtp.ProtoReflect.Descriptor instead.
func (*RteFlowItemGtp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{28}
}

func (x *RteFlowItemGtp) GetVPtRsvFlags() uint32 {
	if x != nil {
		return x.VPtRsvFlags
	}
	return 0
}

func (x *RteFlowItemGtp) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *RteFlowItemGtp) GetMsgLen() uint32 {
	if x != nil {
		return x.MsgLen
	}
	return 0
}

func (x *RteFlowItemGtp) GetTeid() uint32 {
	if x != nil {
		return x.Teid
	}
	return 0
}

type RteEspHdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spi uint32 `protobuf:"varint,1,opt,name=spi,proto3" json:"spi,omitempty"` //*< Security Parameters Index
	Seq uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"` //*< packet sequence number
}

func (x *RteEspHdr) Reset() {
	*x = RteEspHdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteEspHdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteEspHdr) ProtoMessage() {}

func (x *RteEspHdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteEspHdr.ProtoReflect.Descriptor instead.
func (*RteEspHdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{29}
}

func (x *RteEspHdr) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

func (x *RteEspHdr) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type RteFlowItemEsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr *RteEspHdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"` //*< ESP header definition.
}

func (x *RteFlowItemEsp) Reset() {
	*x = RteFlowItemEsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemEsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemEsp) ProtoMessage() {}

func (x *RteFlowItemEsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemEsp.ProtoReflect.Descriptor instead.
func (*RteFlowItemEsp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{30}
}

func (x *RteFlowItemEsp) GetHdr() *RteEspHdr {
	if x != nil {
		return x.Hdr
	}
	return nil
}

type RteFlowItemGeneve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Version (2b), length of the options fields (6b), OAM packet (1b),
	// critical options present (1b), reserved 0 (6b).
	VerOptLenOCRsvd0 uint32 `protobuf:"varint,1,opt,name=ver_opt_len_o_c_rsvd0,json=verOptLenOCRsvd0,proto3" json:"ver_opt_len_o_c_rsvd0,omitempty"`
	Protocol         uint32 `protobuf:"varint,2,opt,name=protocol,proto3" json:"protocol,omitempty"` //*< Protocol type.
	Vni              []byte `protobuf:"bytes,3,opt,name=vni,proto3" json:"vni,omitempty"`            //*< Virtual Network Identifier.
	Rsvd1            uint32 `protobuf:"varint,4,opt,name=rsvd1,proto3" json:"rsvd1,omitempty"`       //*< Reserved, normally 0x00.
}

func (x *RteFlowItemGeneve) Reset() {
	*x = RteFlowItemGeneve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemGeneve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemGeneve) ProtoMessage() {}

func (x *RteFlowItemGeneve) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemGeneve.ProtoReflect.Descriptor instead.
func (*RteFlowItemGeneve) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{31}
}

func (x *RteFlowItemGeneve) GetVerOptLenOCRsvd0() uint32 {
	if x != nil {
		return x.VerOptLenOCRsvd0
	}
	return 0
}

func (x *RteFlowItemGeneve) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *RteFlowItemGeneve) GetVni() []byte {
	if x != nil {
		return x.Vni
	}
	return nil
}

func (x *RteFlowItemGeneve) GetRsvd1() uint32 {
	if x != nil {
		return x.Rsvd1
	}
	return 0
}

type RteFlowItemVxlanGpe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags    uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`       //*< Normally 0x0c (I and P flags).
	Rsvd0    []byte `protobuf:"bytes,2,opt,name=rsvd0,proto3" json:"rsvd0,omitempty"`        //*< Reserved, normally 0x0000.
	Protocol uint32 `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"` //*< Protocol type.
	Vni      []byte `protobuf:"bytes,4,opt,name=vni,proto3" json:"vni,omitempty"`            //*< VXLAN identifier.
	Rsvd1    uint32 `protobuf:"varint,5,opt,name=rsvd1,proto3" json:"rsvd1,omitempty"`       //*< Reserved, normally 0x00.
}

func (x *RteFlowItemVxlanGpe) Reset() {
	*x = RteFlowItemVxlanGpe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemVxlanGpe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemVxlanGpe) ProtoMessage() {}

func (x *RteFlowItemVxlanGpe) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemVxlanGpe.ProtoReflect.Descriptor instead.
func (*RteFlowItemVxlanGpe) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{32}
}

func (x *RteFlowItemVxlanGpe) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RteFlowItemVxlanGpe) GetRsvd0() []byte {
	if x != nil {
		return x.Rsvd0
	}
	return nil
}

func (x *RteFlowItemVxlanGpe) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *RteFlowItemVxlanGpe) GetVni() []byte {
	if x != nil {
		return x.Vni
	}
	return nil
}

func (x *RteFlowItemVxlanGpe) GetRsvd1() uint32 {
	if x != nil {
		return x.Rsvd1
	}
	return 0
}

type RteFlowItemArpEthIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hrd uint32        `protobuf:"varint,1,opt,name=hrd,proto3" json:"hrd,omitempty"` //*< Hardware type, normally 1.
	Pro uint32        `protobuf:"varint,2,opt,name=pro,proto3" json:"pro,omitempty"` //*< Protocol type, normally 0x0800.
	Hln uint32        `protobuf:"varint,3,opt,name=hln,proto3" json:"hln,omitempty"` //*< Hardware address length, normally 6.
	Pln uint32        `protobuf:"varint,4,opt,name=pln,proto3" json:"pln,omitempty"` //*< Protocol address length, normally 4.
	Op  uint32        `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`   //*< Opcode (1 for request, 2 for reply).
	Sha *RteEtherAddr `protobuf:"bytes,6,opt,name=sha,proto3" json:"sha,omitempty"`  //*< Sender hardware address.
	Spa uint32        `protobuf:"varint,7,opt,name=spa,proto3" json:"spa,omitempty"` //*< Sender IPv4 address.
	Tha *RteEtherAddr `protobuf:"bytes,8,opt,name=tha,proto3" json:"tha,omitempty"`  //*< Target hardware address.
	Tpa uint32        `protobuf:"varint,9,opt,name=tpa,proto3" json:"tpa,omitempty"` //*< Target IPv4 address.
}

func (x *RteFlowItemArpEthIpv4) Reset() {
	*x = RteFlowItemArpEthIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemArpEthIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemArpEthIpv4) ProtoMessage() {}

func (x *RteFlowItemArpEthIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemArpEthIpv4.ProtoReflect.Descriptor instead.
func (*RteFlowItemArpEthIpv4) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{33}
}

func (x *RteFlowItemArpEthIpv4) GetHrd() uint32 {
	if x != nil {
		return x.Hrd
	}
	return 0
}

func (x *RteFlowItemArpEthIpv4) GetPro() uint32 {
	if x != nil {
		return x.Pro
	}
	return 0
}

func (x *RteFlowItemArpEthIpv4) GetHln() uint32 {
	if x != nil {
		return x.Hln
	}
	return 0
}

func (x *RteFlowItemArpEthIpv4) GetPln() uint32 {
	if x != nil {
		return x.Pln
	}
	return 0
}

func (x *RteFlowItemArpEthIpv4) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *RteFlowItemArpEthIpv4) GetSha() *RteEtherAddr {
	if x != nil {
		return x.Sha
	}
	return nil
}

func (x *RteFlowItemArpEthIpv4) GetSpa() uint32 {
	if x != nil {
		return x.Spa
	}
	return 0
}

func (x *RteFlowItemArpEthIpv4) GetTha() *RteEtherAddr {
	if x != nil {
		return x.Tha
	}
	return nil
}

func (x *RteFlowItemArpEthIpv4) GetTpa() uint32 {
	if x != nil {
		return x.Tpa
	}
	return 0
}

type RteFlowItemIpv6Ext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextHdr uint32 `protobuf:"varint,1,opt,name=next_hdr,json=nextHdr,proto3" json:"next_hdr,omitempty"` //*< Next header.
}

func (x *RteFlowItemIpv6Ext) Reset() {
	*x = RteFlowItemIpv6Ext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIpv6Ext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIpv6Ext) ProtoMessage() {}

func (x *RteFlowItemIpv6Ext) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIpv6Ext.ProtoReflect.Descriptor instead.
func (*RteFlowItemIpv6Ext) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{34}
}

func (x *RteFlowItemIpv6Ext) GetNextHdr() uint32 {
	if x != nil {
		return x.NextHdr
	}
	return 0
}

type RteFlowItemIcmp6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`         //*< ICMPv6 type.
	Code     uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`         //*< ICMPv6 code.
	Checksum uint32 `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"` //*< ICMPv6 checksum.
}

func (x *RteFlowItemIcmp6) Reset() {
	*x = RteFlowItemIcmp6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIcmp6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIcmp6) ProtoMessage() {}

func (x *RteFlowItemIcmp6) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIcmp6.ProtoReflect.Descriptor instead.
func (*RteFlowItemIcmp6) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{35}
}

func (x *RteFlowItemIcmp6) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RteFlowItemIcmp6) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RteFlowItemIcmp6) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

type RteFlowItemIcmp6NdNs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                              //*< ICMPv6 type, normally 135.
	Code       uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                              //*< ICMPv6 code, normally 0.
	Checksum   uint32 `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`                      //*< ICMPv6 checksum.
	Reserved   uint32 `protobuf:"varint,4,opt,name=reserved,proto3" json:"reserved,omitempty"`                      //*< Reserved, normally 0.
	TargetAddr []byte `protobuf:"bytes,5,opt,name=target_addr,json=targetAddr,proto3" json:"target_addr,omitempty"` //*< Target address.
}

func (x *RteFlowItemIcmp6NdNs) Reset() {
	*x = RteFlowItemIcmp6NdNs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIcmp6NdNs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIcmp6NdNs) ProtoMessage() {}

func (x *RteFlowItemIcmp6NdNs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIcmp6NdNs.ProtoReflect.Descriptor instead.
func (*RteFlowItemIcmp6NdNs) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{36}
}

func (x *RteFlowItemIcmp6NdNs) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RteFlowItemIcmp6NdNs) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RteFlowItemIcmp6NdNs) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *RteFlowItemIcmp6NdNs) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowItemIcmp6NdNs) GetTargetAddr() []byte {
	if x != nil {
		return x.TargetAddr
	}
	return nil
}

type RteFlowItemIcmp6NdNa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`         //*< ICMPv6 type, normally 136.
	Code     uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`         //*< ICMPv6 code, normally 0.
	Checksum uint32 `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"` //*< ICMPv6 checksum.
	//*
	// Route flag (1b), solicited flag (1b), override flag (1b),
	// reserved (29b).
	RsoReserved uint32 `protobuf:"varint,4,opt,name=rso_reserved,json=rsoReserved,proto3" json:"rso_reserved,omitempty"`
	TargetAddr  []byte `protobuf:"bytes,5,opt,name=target_addr,json=targetAddr,proto3" json:"target_addr,omitempty"` //*< Target address.
}

func (x *RteFlowItemIcmp6NdNa) Reset() {
	*x = RteFlowItemIcmp6NdNa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIcmp6NdNa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIcmp6NdNa) ProtoMessage() {}

func (x *RteFlowItemIcmp6NdNa) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIcmp6NdNa.ProtoReflect.Descriptor instead.
func (*RteFlowItemIcmp6NdNa) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{37}
}

func (x *RteFlowItemIcmp6NdNa) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RteFlowItemIcmp6NdNa) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RteFlowItemIcmp6NdNa) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *RteFlowItemIcmp6NdNa) GetRsoReserved() uint32 {
	if x != nil {
		return x.RsoReserved
	}
	return 0
}

func (x *RteFlowItemIcmp6NdNa) GetTargetAddr() []byte {
	if x != nil {
		return x.TargetAddr
	}
	return nil
}

type RteFlowItemIcmp6NdOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`     //*< ND option type.
	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"` //*< ND option length.
}

func (x *RteFlowItemIcmp6NdOpt) Reset() {
	*x = RteFlowItemIcmp6NdOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIcmp6NdOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIcmp6NdOpt) ProtoMessage() {}

func (x *RteFlowItemIcmp6NdOpt) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIcmp6NdOpt.ProtoReflect.Descriptor instead.
func (*RteFlowItemIcmp6NdOpt) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{38}
}

func (x *RteFlowItemIcmp6NdOpt) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RteFlowItemIcmp6NdOpt) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type RteFlowItemIcmp6NdOptSlaEth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32        `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`     //*< ND option type, normally 1.
	Length uint32        `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"` //*< ND option length, normally 1.
	Sla    *RteEtherAddr `protobuf:"bytes,3,opt,name=sla,proto3" json:"sla,omitempty"`        //*< Source Ethernet LLA.
}

func (x *RteFlowItemIcmp6NdOptSlaEth) Reset() {
	*x = RteFlowItemIcmp6NdOptSlaEth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIcmp6NdOptSlaEth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIcmp6NdOptSlaEth) ProtoMessage() {}

func (x *RteFlowItemIcmp6NdOptSlaEth) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIcmp6NdOptSlaEth.ProtoReflect.Descriptor instead.
func (*RteFlowItemIcmp6NdOptSlaEth) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{39}
}

func (x *RteFlowItemIcmp6NdOptSlaEth) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RteFlowItemIcmp6NdOptSlaEth) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RteFlowItemIcmp6NdOptSlaEth) GetSla() *RteEtherAddr {
	if x != nil {
		return x.Sla
	}
	return nil
}

type RteFlowItemIcmp6NdOptStaEth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32        `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`     //*< ND option type, normally 1.
	Length uint32        `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"` //*< ND option length, normally 1.
	Tla    *RteEtherAddr `protobuf:"bytes,3,opt,name=tla,proto3" json:"tla,omitempty"`        //*< Source Ethernet LLA.
}

func (x *RteFlowItemIcmp6NdOptStaEth) Reset() {
	*x = RteFlowItemIcmp6NdOptStaEth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIcmp6NdOptStaEth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIcmp6NdOptStaEth) ProtoMessage() {}

func (x *RteFlowItemIcmp6NdOptStaEth) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIcmp6NdOptStaEth.ProtoReflect.Descriptor instead.
func (*RteFlowItemIcmp6NdOptStaEth) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{40}
}

func (x *RteFlowItemIcmp6NdOptStaEth) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RteFlowItemIcmp6NdOptStaEth) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RteFlowItemIcmp6NdOptStaEth) GetTla() *RteEtherAddr {
	if x != nil {
		return x.Tla
	}
	return nil
}

type RteFlowItemMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RteFlowItemMark) Reset() {
	*x = RteFlowItemMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemMark) ProtoMessage() {}

func (x *RteFlowItemMark) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemMark.ProtoReflect.Descriptor instead.
func (*RteFlowItemMark) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{41}
}

func (x *RteFlowItemMark) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RteFlowItemMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint32 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RteFlowItemMeta) Reset() {
	*x = RteFlowItemMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemMeta) ProtoMessage() {}

func (x *RteFlowItemMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemMeta.ProtoReflect.Descriptor instead.
func (*RteFlowItemMeta) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{42}
}

func (x *RteFlowItemMeta) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type RteFlowItemGtpPsc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PduType uint32 `protobuf:"varint,1,opt,name=pdu_type,json=pduType,proto3" json:"pdu_type,omitempty"` //*< PDU type.
	Qfi     uint32 `protobuf:"varint,2,opt,name=qfi,proto3" json:"qfi,omitempty"`                        //*< QoS flow identifier.
}

func (x *RteFlowItemGtpPsc) Reset() {
	*x = RteFlowItemGtpPsc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemGtpPsc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemGtpPsc) ProtoMessage() {}

func (x *RteFlowItemGtpPsc) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemGtpPsc.ProtoReflect.Descriptor instead.
func (*RteFlowItemGtpPsc) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{43}
}

func (x *RteFlowItemGtpPsc) GetPduType() uint32 {
	if x != nil {
		return x.PduType
	}
	return 0
}

func (x *RteFlowItemGtpPsc) GetQfi() uint32 {
	if x != nil {
		return x.Qfi
	}
	return 0
}

type RteFlowItemPppoe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Version (4b), type (4b).
	VersionType uint32 `protobuf:"varint,1,opt,name=version_type,json=versionType,proto3" json:"version_type,omitempty"`
	Code        uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                            //*< Message type.
	SessionId   uint32 `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` //*< Session identifier.
	Length      uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`                        //*< Payload length.
}

func (x *RteFlowItemPppoe) Reset() {
	*x = RteFlowItemPppoe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemPppoe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemPppoe) ProtoMessage() {}

func (x *RteFlowItemPppoe) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemPppoe.ProtoReflect.Descriptor instead.
func (*RteFlowItemPppoe) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{44}
}

func (x *RteFlowItemPppoe) GetVersionType() uint32 {
	if x != nil {
		return x.VersionType
	}
	return 0
}

func (x *RteFlowItemPppoe) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RteFlowItemPppoe) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *RteFlowItemPppoe) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type RteFlowItemPppoeProtoId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoId uint32 `protobuf:"varint,1,opt,name=proto_id,json=protoId,proto3" json:"proto_id,omitempty"` //*< PPP protocol identifier.
}

func (x *RteFlowItemPppoeProtoId) Reset() {
	*x = RteFlowItemPppoeProtoId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemPppoeProtoId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemPppoeProtoId) ProtoMessage() {}

func (x *RteFlowItemPppoeProtoId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemPppoeProtoId.ProtoReflect.Descriptor instead.
func (*RteFlowItemPppoeProtoId) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{45}
}

func (x *RteFlowItemPppoeProtoId) GetProtoId() uint32 {
	if x != nil {
		return x.ProtoId
	}
	return 0
}

type RteFlowItemNsh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	OamPkt    uint32 `protobuf:"varint,2,opt,name=oam_pkt,json=oamPkt,proto3" json:"oam_pkt,omitempty"`
	Reserved  uint32 `protobuf:"varint,3,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Ttl       uint32 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Length    uint32 `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`
	Reserved1 uint32 `protobuf:"varint,6,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
	Mdtype    uint32 `protobuf:"varint,7,opt,name=mdtype,proto3" json:"mdtype,omitempty"`
	NextProto uint32 `protobuf:"varint,8,opt,name=next_proto,json=nextProto,proto3" json:"next_proto,omitempty"`
	Spi       uint32 `protobuf:"varint,9,opt,name=spi,proto3" json:"spi,omitempty"`
	Sindex    uint32 `protobuf:"varint,10,opt,name=sindex,proto3" json:"sindex,omitempty"`
}

func (x *RteFlowItemNsh) Reset() {
	*x = RteFlowItemNsh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemNsh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemNsh) ProtoMessage() {}

func (x *RteFlowItemNsh) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemNsh.ProtoReflect.Descriptor instead.
func (*RteFlowItemNsh) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{46}
}

func (x *RteFlowItemNsh) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RteFlowItemNsh) GetOamPkt() uint32 {
	if x != nil {
		return x.OamPkt
	}
	return 0
}

func (x *RteFlowItemNsh) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowItemNsh) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RteFlowItemNsh) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RteFlowItemNsh) GetReserved1() uint32 {
	if x != nil {
		return x.Reserved1
	}
	return 0
}

func (x *RteFlowItemNsh) GetMdtype() uint32 {
	if x != nil {
		return x.Mdtype
	}
	return 0
}

func (x *RteFlowItemNsh) GetNextProto() uint32 {
	if x != nil {
		return x.NextProto
	}
	return 0
}

func (x *RteFlowItemNsh) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

func (x *RteFlowItemNsh) GetSindex() uint32 {
	if x != nil {
		return x.Sindex
	}
	return 0
}

type RteFlowItemIgmp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	MaxRespTime uint32 `protobuf:"varint,2,opt,name=max_resp_time,json=maxRespTime,proto3" json:"max_resp_time,omitempty"`
	Checksum    uint32 `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	GroupAddr   uint32 `protobuf:"varint,4,opt,name=group_addr,json=groupAddr,proto3" json:"group_addr,omitempty"`
}

func (x *RteFlowItemIgmp) Reset() {
	*x = RteFlowItemIgmp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemIgmp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemIgmp) ProtoMessage() {}

func (x *RteFlowItemIgmp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemIgmp.ProtoReflect.Descriptor instead.
func (*RteFlowItemIgmp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{47}
}

func (x *RteFlowItemIgmp) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RteFlowItemIgmp) GetMaxRespTime() uint32 {
	if x != nil {
		return x.MaxRespTime
	}
	return 0
}

func (x *RteFlowItemIgmp) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *RteFlowItemIgmp) GetGroupAddr() uint32 {
	if x != nil {
		return x.GroupAddr
	}
	return 0
}

type RteFlowItemAh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextHdr    uint32 `protobuf:"varint,1,opt,name=next_hdr,json=nextHdr,proto3" json:"next_hdr,omitempty"`
	PayloadLen uint32 `protobuf:"varint,2,opt,name=payload_len,json=payloadLen,proto3" json:"payload_len,omitempty"`
	Reserved   uint32 `protobuf:"varint,3,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Spi        uint32 `protobuf:"varint,4,opt,name=spi,proto3" json:"spi,omitempty"`
	SeqNum     uint32 `protobuf:"varint,5,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
}

func (x *RteFlowItemAh) Reset() {
	*x = RteFlowItemAh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemAh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemAh) ProtoMessage() {}

func (x *RteFlowItemAh) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemAh.ProtoReflect.Descriptor instead.
func (*RteFlowItemAh) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{48}
}

func (x *RteFlowItemAh) GetNextHdr() uint32 {
	if x != nil {
		return x.NextHdr
	}
	return 0
}

func (x *RteFlowItemAh) GetPayloadLen() uint32 {
	if x != nil {
		return x.PayloadLen
	}
	return 0
}

func (x *RteFlowItemAh) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowItemAh) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

func (x *RteFlowItemAh) GetSeqNum() uint32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

type RteHigig2Frc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ksop     uint32 `protobuf:"varint,1,opt,name=ksop,proto3" json:"ksop,omitempty"`
	Tc       uint32 `protobuf:"varint,2,opt,name=tc,proto3" json:"tc,omitempty"`
	Mcst     uint32 `protobuf:"varint,3,opt,name=mcst,proto3" json:"mcst,omitempty"`
	Resv     uint32 `protobuf:"varint,4,opt,name=resv,proto3" json:"resv,omitempty"`
	DstModid uint32 `protobuf:"varint,5,opt,name=dst_modid,json=dstModid,proto3" json:"dst_modid,omitempty"`
	DstPid   uint32 `protobuf:"varint,6,opt,name=dst_pid,json=dstPid,proto3" json:"dst_pid,omitempty"`
	SrcModid uint32 `protobuf:"varint,7,opt,name=src_modid,json=srcModid,proto3" json:"src_modid,omitempty"`
	SrcPid   uint32 `protobuf:"varint,8,opt,name=src_pid,json=srcPid,proto3" json:"src_pid,omitempty"`
	Lbid     uint32 `protobuf:"varint,9,opt,name=lbid,proto3" json:"lbid,omitempty"`
	PpdType  uint32 `protobuf:"varint,11,opt,name=ppd_type,json=ppdType,proto3" json:"ppd_type,omitempty"`
	Resv1    uint32 `protobuf:"varint,12,opt,name=resv1,proto3" json:"resv1,omitempty"`
	Dp       uint32 `protobuf:"varint,13,opt,name=dp,proto3" json:"dp,omitempty"`
}

func (x *RteHigig2Frc) Reset() {
	*x = RteHigig2Frc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteHigig2Frc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteHigig2Frc) ProtoMessage() {}

func (x *RteHigig2Frc) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteHigig2Frc.ProtoReflect.Descriptor instead.
func (*RteHigig2Frc) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{49}
}

func (x *RteHigig2Frc) GetKsop() uint32 {
	if x != nil {
		return x.Ksop
	}
	return 0
}

func (x *RteHigig2Frc) GetTc() uint32 {
	if x != nil {
		return x.Tc
	}
	return 0
}

func (x *RteHigig2Frc) GetMcst() uint32 {
	if x != nil {
		return x.Mcst
	}
	return 0
}

func (x *RteHigig2Frc) GetResv() uint32 {
	if x != nil {
		return x.Resv
	}
	return 0
}

func (x *RteHigig2Frc) GetDstModid() uint32 {
	if x != nil {
		return x.DstModid
	}
	return 0
}

func (x *RteHigig2Frc) GetDstPid() uint32 {
	if x != nil {
		return x.DstPid
	}
	return 0
}

func (x *RteHigig2Frc) GetSrcModid() uint32 {
	if x != nil {
		return x.SrcModid
	}
	return 0
}

func (x *RteHigig2Frc) GetSrcPid() uint32 {
	if x != nil {
		return x.SrcPid
	}
	return 0
}

func (x *RteHigig2Frc) GetLbid() uint32 {
	if x != nil {
		return x.Lbid
	}
	return 0
}

func (x *RteHigig2Frc) GetPpdType() uint32 {
	if x != nil {
		return x.PpdType
	}
	return 0
}

func (x *RteHigig2Frc) GetResv1() uint32 {
	if x != nil {
		return x.Resv1
	}
	return 0
}

func (x *RteHigig2Frc) GetDp() uint32 {
	if x != nil {
		return x.Dp
	}
	return 0
}

type RteHigig2PptType0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mirror        uint32 `protobuf:"varint,1,opt,name=mirror,proto3" json:"mirror,omitempty"`
	MirrorDone    uint32 `protobuf:"varint,2,opt,name=mirror_done,json=mirrorDone,proto3" json:"mirror_done,omitempty"`
	MirrorOnly    uint32 `protobuf:"varint,3,opt,name=mirror_only,json=mirrorOnly,proto3" json:"mirror_only,omitempty"`
	IngressTagged uint32 `protobuf:"varint,4,opt,name=ingress_tagged,json=ingressTagged,proto3" json:"ingress_tagged,omitempty"`
	DstTgid       uint32 `protobuf:"varint,5,opt,name=dst_tgid,json=dstTgid,proto3" json:"dst_tgid,omitempty"`
	DstT          uint32 `protobuf:"varint,6,opt,name=dst_t,json=dstT,proto3" json:"dst_t,omitempty"`
	VcLabel2      uint32 `protobuf:"varint,7,opt,name=vc_label2,json=vcLabel2,proto3" json:"vc_label2,omitempty"`
	LabelPresent  uint32 `protobuf:"varint,8,opt,name=label_present,json=labelPresent,proto3" json:"label_present,omitempty"`
	L3            uint32 `protobuf:"varint,9,opt,name=l3,proto3" json:"l3,omitempty"`
	Res           uint32 `protobuf:"varint,10,opt,name=res,proto3" json:"res,omitempty"`
	VcLabel1      uint32 `protobuf:"varint,11,opt,name=vc_label1,json=vcLabel1,proto3" json:"vc_label1,omitempty"`
	VcLabel0      uint32 `protobuf:"varint,12,opt,name=vc_label0,json=vcLabel0,proto3" json:"vc_label0,omitempty"`
	VidHigh       uint32 `protobuf:"varint,13,opt,name=vid_high,json=vidHigh,proto3" json:"vid_high,omitempty"`
	VidLow        uint32 `protobuf:"varint,14,opt,name=vid_low,json=vidLow,proto3" json:"vid_low,omitempty"`
	Opc           uint32 `protobuf:"varint,15,opt,name=opc,proto3" json:"opc,omitempty"`
	Res1          uint32 `protobuf:"varint,16,opt,name=res1,proto3" json:"res1,omitempty"`
	SrceT         uint32 `protobuf:"varint,17,opt,name=srce_t,json=srceT,proto3" json:"srce_t,omitempty"`
	Pf            uint32 `protobuf:"varint,18,opt,name=pf,proto3" json:"pf,omitempty"`
	Res2          uint32 `protobuf:"varint,19,opt,name=res2,proto3" json:"res2,omitempty"`
	HdrExtLength  uint32 `protobuf:"varint,20,opt,name=hdr_ext_length,json=hdrExtLength,proto3" json:"hdr_ext_length,omitempty"`
}

func (x *RteHigig2PptType0) Reset() {
	*x = RteHigig2PptType0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteHigig2PptType0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteHigig2PptType0) ProtoMessage() {}

func (x *RteHigig2PptType0) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteHigig2PptType0.ProtoReflect.Descriptor instead.
func (*RteHigig2PptType0) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{50}
}

func (x *RteHigig2PptType0) GetMirror() uint32 {
	if x != nil {
		return x.Mirror
	}
	return 0
}

func (x *RteHigig2PptType0) GetMirrorDone() uint32 {
	if x != nil {
		return x.MirrorDone
	}
	return 0
}

func (x *RteHigig2PptType0) GetMirrorOnly() uint32 {
	if x != nil {
		return x.MirrorOnly
	}
	return 0
}

func (x *RteHigig2PptType0) GetIngressTagged() uint32 {
	if x != nil {
		return x.IngressTagged
	}
	return 0
}

func (x *RteHigig2PptType0) GetDstTgid() uint32 {
	if x != nil {
		return x.DstTgid
	}
	return 0
}

func (x *RteHigig2PptType0) GetDstT() uint32 {
	if x != nil {
		return x.DstT
	}
	return 0
}

func (x *RteHigig2PptType0) GetVcLabel2() uint32 {
	if x != nil {
		return x.VcLabel2
	}
	return 0
}

func (x *RteHigig2PptType0) GetLabelPresent() uint32 {
	if x != nil {
		return x.LabelPresent
	}
	return 0
}

func (x *RteHigig2PptType0) GetL3() uint32 {
	if x != nil {
		return x.L3
	}
	return 0
}

func (x *RteHigig2PptType0) GetRes() uint32 {
	if x != nil {
		return x.Res
	}
	return 0
}

func (x *RteHigig2PptType0) GetVcLabel1() uint32 {
	if x != nil {
		return x.VcLabel1
	}
	return 0
}

func (x *RteHigig2PptType0) GetVcLabel0() uint32 {
	if x != nil {
		return x.VcLabel0
	}
	return 0
}

func (x *RteHigig2PptType0) GetVidHigh() uint32 {
	if x != nil {
		return x.VidHigh
	}
	return 0
}

func (x *RteHigig2PptType0) GetVidLow() uint32 {
	if x != nil {
		return x.VidLow
	}
	return 0
}

func (x *RteHigig2PptType0) GetOpc() uint32 {
	if x != nil {
		return x.Opc
	}
	return 0
}

func (x *RteHigig2PptType0) GetRes1() uint32 {
	if x != nil {
		return x.Res1
	}
	return 0
}

func (x *RteHigig2PptType0) GetSrceT() uint32 {
	if x != nil {
		return x.SrceT
	}
	return 0
}

func (x *RteHigig2PptType0) GetPf() uint32 {
	if x != nil {
		return x.Pf
	}
	return 0
}

func (x *RteHigig2PptType0) GetRes2() uint32 {
	if x != nil {
		return x.Res2
	}
	return 0
}

func (x *RteHigig2PptType0) GetHdrExtLength() uint32 {
	if x != nil {
		return x.HdrExtLength
	}
	return 0
}

type RteHigig2PptType1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classification uint32 `protobuf:"varint,1,opt,name=classification,proto3" json:"classification,omitempty"`
	Resv           uint32 `protobuf:"varint,2,opt,name=resv,proto3" json:"resv,omitempty"`
	Vid            uint32 `protobuf:"varint,3,opt,name=vid,proto3" json:"vid,omitempty"`
	Opcode         uint32 `protobuf:"varint,4,opt,name=opcode,proto3" json:"opcode,omitempty"`
	Resv1          uint32 `protobuf:"varint,5,opt,name=resv1,proto3" json:"resv1,omitempty"`
	SrcT           uint32 `protobuf:"varint,6,opt,name=src_t,json=srcT,proto3" json:"src_t,omitempty"`
	Pfm            uint32 `protobuf:"varint,7,opt,name=pfm,proto3" json:"pfm,omitempty"`
	Resv2          uint32 `protobuf:"varint,8,opt,name=resv2,proto3" json:"resv2,omitempty"`
	HdrExtLen      uint32 `protobuf:"varint,9,opt,name=hdr_ext_len,json=hdrExtLen,proto3" json:"hdr_ext_len,omitempty"`
}

func (x *RteHigig2PptType1) Reset() {
	*x = RteHigig2PptType1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteHigig2PptType1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteHigig2PptType1) ProtoMessage() {}

func (x *RteHigig2PptType1) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteHigig2PptType1.ProtoReflect.Descriptor instead.
func (*RteHigig2PptType1) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{51}
}

func (x *RteHigig2PptType1) GetClassification() uint32 {
	if x != nil {
		return x.Classification
	}
	return 0
}

func (x *RteHigig2PptType1) GetResv() uint32 {
	if x != nil {
		return x.Resv
	}
	return 0
}

func (x *RteHigig2PptType1) GetVid() uint32 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *RteHigig2PptType1) GetOpcode() uint32 {
	if x != nil {
		return x.Opcode
	}
	return 0
}

func (x *RteHigig2PptType1) GetResv1() uint32 {
	if x != nil {
		return x.Resv1
	}
	return 0
}

func (x *RteHigig2PptType1) GetSrcT() uint32 {
	if x != nil {
		return x.SrcT
	}
	return 0
}

func (x *RteHigig2PptType1) GetPfm() uint32 {
	if x != nil {
		return x.Pfm
	}
	return 0
}

func (x *RteHigig2PptType1) GetResv2() uint32 {
	if x != nil {
		return x.Resv2
	}
	return 0
}

func (x *RteHigig2PptType1) GetHdrExtLen() uint32 {
	if x != nil {
		return x.HdrExtLen
	}
	return 0
}

type RteHigig2Hdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fcr  *RteHigig2Frc      `protobuf:"bytes,1,opt,name=fcr,proto3" json:"fcr,omitempty"`
	Ppt0 *RteHigig2PptType0 `protobuf:"bytes,2,opt,name=ppt0,proto3" json:"ppt0,omitempty"`
	Ppt1 *RteHigig2PptType1 `protobuf:"bytes,3,opt,name=ppt1,proto3" json:"ppt1,omitempty"`
}

func (x *RteHigig2Hdr) Reset() {
	*x = RteHigig2Hdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteHigig2Hdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteHigig2Hdr) ProtoMessage() {}

func (x *RteHigig2Hdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteHigig2Hdr.ProtoReflect.Descriptor instead.
func (*RteHigig2Hdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{52}
}

func (x *RteHigig2Hdr) GetFcr() *RteHigig2Frc {
	if x != nil {
		return x.Fcr
	}
	return nil
}

func (x *RteHigig2Hdr) GetPpt0() *RteHigig2PptType0 {
	if x != nil {
		return x.Ppt0
	}
	return nil
}

func (x *RteHigig2Hdr) GetPpt1() *RteHigig2PptType1 {
	if x != nil {
		return x.Ppt1
	}
	return nil
}

type RteFlowItemHigig2Hdr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr *RteHigig2Hdr `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
}

func (x *RteFlowItemHigig2Hdr) Reset() {
	*x = RteFlowItemHigig2Hdr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemHigig2Hdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemHigig2Hdr) ProtoMessage() {}

func (x *RteFlowItemHigig2Hdr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemHigig2Hdr.ProtoReflect.Descriptor instead.
func (*RteFlowItemHigig2Hdr) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{53}
}

func (x *RteFlowItemHigig2Hdr) GetHdr() *RteHigig2Hdr {
	if x != nil {
		return x.Hdr
	}
	return nil
}

type RteFlowItemTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  uint32 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RteFlowItemTag) Reset() {
	*x = RteFlowItemTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemTag) ProtoMessage() {}

func (x *RteFlowItemTag) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemTag.ProtoReflect.Descriptor instead.
func (*RteFlowItemTag) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{54}
}

func (x *RteFlowItemTag) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *RteFlowItemTag) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RteFlowItemL2Tpv3Oip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId uint32 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` //*< Session ID.
}

func (x *RteFlowItemL2Tpv3Oip) Reset() {
	*x = RteFlowItemL2Tpv3Oip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItemL2Tpv3Oip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItemL2Tpv3Oip) ProtoMessage() {}

func (x *RteFlowItemL2Tpv3Oip) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItemL2Tpv3Oip.ProtoReflect.Descriptor instead.
func (*RteFlowItemL2Tpv3Oip) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{55}
}

func (x *RteFlowItemL2Tpv3Oip) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

type RteFlowItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RteFlowItemType `protobuf:"varint,1,opt,name=type,proto3,enum=flow.RteFlowItemType" json:"type,omitempty"`
	Spec *anypb.Any      `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Last *anypb.Any      `protobuf:"bytes,3,opt,name=last,proto3" json:"last,omitempty"`
	Mask *anypb.Any      `protobuf:"bytes,4,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *RteFlowItem) Reset() {
	*x = RteFlowItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowItem) ProtoMessage() {}

func (x *RteFlowItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowItem.ProtoReflect.Descriptor instead.
func (*RteFlowItem) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{56}
}

func (x *RteFlowItem) GetType() RteFlowItemType {
	if x != nil {
		return x.Type
	}
	return RteFlowItemType_RTE_FLOW_ITEM_TYPE_END
}

func (x *RteFlowItem) GetSpec() *anypb.Any {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *RteFlowItem) GetLast() *anypb.Any {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *RteFlowItem) GetMask() *anypb.Any {
	if x != nil {
		return x.Mask
	}
	return nil
}

type RteFlowActionMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //*< Integer value to return with packets.
}

func (x *RteFlowActionMark) Reset() {
	*x = RteFlowActionMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionMark) ProtoMessage() {}

func (x *RteFlowActionMark) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionMark.ProtoReflect.Descriptor instead.
func (*RteFlowActionMark) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{57}
}

func (x *RteFlowActionMark) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RteFlowActionJump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group uint32 `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *RteFlowActionJump) Reset() {
	*x = RteFlowActionJump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionJump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionJump) ProtoMessage() {}

func (x *RteFlowActionJump) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionJump.ProtoReflect.Descriptor instead.
func (*RteFlowActionJump) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{58}
}

func (x *RteFlowActionJump) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

type RteFlowActionQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` //*< Queue index to use.
}

func (x *RteFlowActionQueue) Reset() {
	*x = RteFlowActionQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionQueue) ProtoMessage() {}

func (x *RteFlowActionQueue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionQueue.ProtoReflect.Descriptor instead.
func (*RteFlowActionQueue) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{59}
}

func (x *RteFlowActionQueue) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RteFlowActionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shared   uint32 `protobuf:"varint,1,opt,name=shared,proto3" json:"shared,omitempty"`     //*< Share counter ID with other flow rules.
	Reserved uint32 `protobuf:"varint,2,opt,name=reserved,proto3" json:"reserved,omitempty"` //*< Reserved, must be zero.
	Id       uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`             //*< Counter ID.
}

func (x *RteFlowActionCount) Reset() {
	*x = RteFlowActionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionCount) ProtoMessage() {}

func (x *RteFlowActionCount) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionCount.ProtoReflect.Descriptor instead.
func (*RteFlowActionCount) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{60}
}

func (x *RteFlowActionCount) GetShared() uint32 {
	if x != nil {
		return x.Shared
	}
	return 0
}

func (x *RteFlowActionCount) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowActionCount) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RteFlowQueryCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reset_   uint32 `protobuf:"varint,1,opt,name=reset,proto3" json:"reset,omitempty"`                       //*< Reset counters after query [in].
	HitsSet  uint32 `protobuf:"varint,2,opt,name=hits_set,json=hitsSet,proto3" json:"hits_set,omitempty"`    //*< hits field is set [out].
	BytesSet uint32 `protobuf:"varint,3,opt,name=bytes_set,json=bytesSet,proto3" json:"bytes_set,omitempty"` //*< bytes field is set [out].
	Reserved uint32 `protobuf:"varint,4,opt,name=reserved,proto3" json:"reserved,omitempty"`                 //*< Reserved, must be zero [in, out].
	Hits     uint64 `protobuf:"varint,5,opt,name=hits,proto3" json:"hits,omitempty"`                         //*< Number of hits for this rule [out].
	Bytes    uint64 `protobuf:"varint,6,opt,name=bytes,proto3" json:"bytes,omitempty"`                       //*< Number of bytes through this rule [out].
}

func (x *RteFlowQueryCount) Reset() {
	*x = RteFlowQueryCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowQueryCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowQueryCount) ProtoMessage() {}

func (x *RteFlowQueryCount) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowQueryCount.ProtoReflect.Descriptor instead.
func (*RteFlowQueryCount) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{61}
}

func (x *RteFlowQueryCount) GetReset_() uint32 {
	if x != nil {
		return x.Reset_
	}
	return 0
}

func (x *RteFlowQueryCount) GetHitsSet() uint32 {
	if x != nil {
		return x.HitsSet
	}
	return 0
}

func (x *RteFlowQueryCount) GetBytesSet() uint32 {
	if x != nil {
		return x.BytesSet
	}
	return 0
}

func (x *RteFlowQueryCount) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowQueryCount) GetHits() uint64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *RteFlowQueryCount) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type RteFlowActionRss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Func RteEthHashFunction `protobuf:"varint,1,opt,name=func,proto3,enum=flow.RteEthHashFunction" json:"func,omitempty"` //*< RSS hash function to apply.
	//*
	// Packet encapsulation level RSS hash @p types apply to.
	//
	// - @p 0 requests the default behavior. Depending on the packet
	//   type, it can mean outermost, innermost, anything in between or
	//   even no RSS.
	//
	//   It basically stands for the innermost encapsulation level RSS
	//   can be performed on according to PMD and device capabilities.
	//
	// - @p 1 requests RSS to be performed on the outermost packet
	//   encapsulation level.
	//
	// - @p 2 and subsequent values request RSS to be performed on the
	//   specified inner packet encapsulation level, from outermost to
	//   innermost (lower to higher values).
	//
	// Values other than @p 0 are not necessarily supported.
	//
	// Requesting a specific RSS level on unrecognized traffic results
	// in undefined behavior. For predictable results, it is recommended
	// to make the flow rule pattern match packet headers up to the
	// requested encapsulation level so that only matching traffic goes
	// through.
	Level    uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Types    uint64 `protobuf:"varint,3,opt,name=types,proto3" json:"types,omitempty"`                       //*< Specific RSS hash types (see ETH_RSS_*).
	KeyLen   uint32 `protobuf:"varint,4,opt,name=key_len,json=keyLen,proto3" json:"key_len,omitempty"`       //*< Hash key length in bytes.
	QueueNum uint32 `protobuf:"varint,5,opt,name=queue_num,json=queueNum,proto3" json:"queue_num,omitempty"` //*< Number of entries in @p queue.
	Key      uint32 `protobuf:"varint,6,opt,name=key,proto3" json:"key,omitempty"`                           //*< Hash key.
	Queue    uint32 `protobuf:"varint,7,opt,name=queue,proto3" json:"queue,omitempty"`                       //*< Queue indices to use.
}

func (x *RteFlowActionRss) Reset() {
	*x = RteFlowActionRss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionRss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionRss) ProtoMessage() {}

func (x *RteFlowActionRss) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionRss.ProtoReflect.Descriptor instead.
func (*RteFlowActionRss) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{62}
}

func (x *RteFlowActionRss) GetFunc() RteEthHashFunction {
	if x != nil {
		return x.Func
	}
	return RteEthHashFunction_RTE_ETH_HASH_FUNCTION_DEFAULT
}

func (x *RteFlowActionRss) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RteFlowActionRss) GetTypes() uint64 {
	if x != nil {
		return x.Types
	}
	return 0
}

func (x *RteFlowActionRss) GetKeyLen() uint32 {
	if x != nil {
		return x.KeyLen
	}
	return 0
}

func (x *RteFlowActionRss) GetQueueNum() uint32 {
	if x != nil {
		return x.QueueNum
	}
	return 0
}

func (x *RteFlowActionRss) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *RteFlowActionRss) GetQueue() uint32 {
	if x != nil {
		return x.Queue
	}
	return 0
}

type RteFlowActionVf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved uint32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Original uint32 `protobuf:"varint,2,opt,name=original,proto3" json:"original,omitempty"`
	Id       uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RteFlowActionVf) Reset() {
	*x = RteFlowActionVf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionVf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionVf) ProtoMessage() {}

func (x *RteFlowActionVf) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionVf.ProtoReflect.Descriptor instead.
func (*RteFlowActionVf) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{63}
}

func (x *RteFlowActionVf) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowActionVf) GetOriginal() uint32 {
	if x != nil {
		return x.Original
	}
	return 0
}

func (x *RteFlowActionVf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RteFlowActionPhyPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Original uint32 `protobuf:"varint,1,opt,name=original,proto3" json:"original,omitempty"` //*< Use original port index if possible.
	Reserved uint32 `protobuf:"varint,2,opt,name=reserved,proto3" json:"reserved,omitempty"` //*< Reserved, must be zero.
	Index    uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`       //*< Physical port index.
}

func (x *RteFlowActionPhyPort) Reset() {
	*x = RteFlowActionPhyPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionPhyPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionPhyPort) ProtoMessage() {}

func (x *RteFlowActionPhyPort) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionPhyPort.ProtoReflect.Descriptor instead.
func (*RteFlowActionPhyPort) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{64}
}

func (x *RteFlowActionPhyPort) GetOriginal() uint32 {
	if x != nil {
		return x.Original
	}
	return 0
}

func (x *RteFlowActionPhyPort) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowActionPhyPort) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RteFlowActionPortId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Original uint32 `protobuf:"varint,1,opt,name=original,proto3" json:"original,omitempty"` //*< Use original DPDK port ID if possible.
	Reserved uint32 `protobuf:"varint,2,opt,name=reserved,proto3" json:"reserved,omitempty"` //*< Reserved, must be zero.
	Id       uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`             //*< DPDK port ID.
}

func (x *RteFlowActionPortId) Reset() {
	*x = RteFlowActionPortId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionPortId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionPortId) ProtoMessage() {}

func (x *RteFlowActionPortId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionPortId.ProtoReflect.Descriptor instead.
func (*RteFlowActionPortId) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{65}
}

func (x *RteFlowActionPortId) GetOriginal() uint32 {
	if x != nil {
		return x.Original
	}
	return 0
}

func (x *RteFlowActionPortId) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RteFlowActionPortId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RteFlowActionMeter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MtrId uint32 `protobuf:"varint,1,opt,name=mtr_id,json=mtrId,proto3" json:"mtr_id,omitempty"` //*< MTR object ID created with rte_mtr_create().
}

func (x *RteFlowActionMeter) Reset() {
	*x = RteFlowActionMeter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionMeter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionMeter) ProtoMessage() {}

func (x *RteFlowActionMeter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionMeter.ProtoReflect.Descriptor instead.
func (*RteFlowActionMeter) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{66}
}

func (x *RteFlowActionMeter) GetMtrId() uint32 {
	if x != nil {
		return x.MtrId
	}
	return 0
}

type RteFlowActionSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecuritySession *anypb.Any `protobuf:"bytes,1,opt,name=security_session,json=securitySession,proto3" json:"security_session,omitempty"` //*< Pointer to security session structure.
}

func (x *RteFlowActionSecurity) Reset() {
	*x = RteFlowActionSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSecurity) ProtoMessage() {}

func (x *RteFlowActionSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSecurity.ProtoReflect.Descriptor instead.
func (*RteFlowActionSecurity) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{67}
}

func (x *RteFlowActionSecurity) GetSecuritySession() *anypb.Any {
	if x != nil {
		return x.SecuritySession
	}
	return nil
}

type RteFlowActionOfSetMplsTtl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsTtl uint32 `protobuf:"varint,1,opt,name=mpls_ttl,json=mplsTtl,proto3" json:"mpls_ttl,omitempty"` //*< MPLS TTL.
}

func (x *RteFlowActionOfSetMplsTtl) Reset() {
	*x = RteFlowActionOfSetMplsTtl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionOfSetMplsTtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionOfSetMplsTtl) ProtoMessage() {}

func (x *RteFlowActionOfSetMplsTtl) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionOfSetMplsTtl.ProtoReflect.Descriptor instead.
func (*RteFlowActionOfSetMplsTtl) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{68}
}

func (x *RteFlowActionOfSetMplsTtl) GetMplsTtl() uint32 {
	if x != nil {
		return x.MplsTtl
	}
	return 0
}

type RteFlowActionOfSetNwTtl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NwTtl uint32 `protobuf:"varint,1,opt,name=nw_ttl,json=nwTtl,proto3" json:"nw_ttl,omitempty"` //*< IP TTL.
}

func (x *RteFlowActionOfSetNwTtl) Reset() {
	*x = RteFlowActionOfSetNwTtl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionOfSetNwTtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionOfSetNwTtl) ProtoMessage() {}

func (x *RteFlowActionOfSetNwTtl) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionOfSetNwTtl.ProtoReflect.Descriptor instead.
func (*RteFlowActionOfSetNwTtl) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{69}
}

func (x *RteFlowActionOfSetNwTtl) GetNwTtl() uint32 {
	if x != nil {
		return x.NwTtl
	}
	return 0
}

type RteFlowActionOfPushVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ethertype uint32 `protobuf:"varint,1,opt,name=ethertype,proto3" json:"ethertype,omitempty"` //*< EtherType.
}

func (x *RteFlowActionOfPushVlan) Reset() {
	*x = RteFlowActionOfPushVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionOfPushVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionOfPushVlan) ProtoMessage() {}

func (x *RteFlowActionOfPushVlan) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionOfPushVlan.ProtoReflect.Descriptor instead.
func (*RteFlowActionOfPushVlan) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{70}
}

func (x *RteFlowActionOfPushVlan) GetEthertype() uint32 {
	if x != nil {
		return x.Ethertype
	}
	return 0
}

type RteFlowActionOfSetVlanVid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanVid uint32 `protobuf:"varint,1,opt,name=vlan_vid,json=vlanVid,proto3" json:"vlan_vid,omitempty"` //*< VLAN id.
}

func (x *RteFlowActionOfSetVlanVid) Reset() {
	*x = RteFlowActionOfSetVlanVid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionOfSetVlanVid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionOfSetVlanVid) ProtoMessage() {}

func (x *RteFlowActionOfSetVlanVid) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionOfSetVlanVid.ProtoReflect.Descriptor instead.
func (*RteFlowActionOfSetVlanVid) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{71}
}

func (x *RteFlowActionOfSetVlanVid) GetVlanVid() uint32 {
	if x != nil {
		return x.VlanVid
	}
	return 0
}

type RteFlowActionOfSetVlanPcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanPcp uint32 `protobuf:"varint,1,opt,name=vlan_pcp,json=vlanPcp,proto3" json:"vlan_pcp,omitempty"` //*< VLAN priority.
}

func (x *RteFlowActionOfSetVlanPcp) Reset() {
	*x = RteFlowActionOfSetVlanPcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionOfSetVlanPcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionOfSetVlanPcp) ProtoMessage() {}

func (x *RteFlowActionOfSetVlanPcp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionOfSetVlanPcp.ProtoReflect.Descriptor instead.
func (*RteFlowActionOfSetVlanPcp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{72}
}

func (x *RteFlowActionOfSetVlanPcp) GetVlanPcp() uint32 {
	if x != nil {
		return x.VlanPcp
	}
	return 0
}

type RteFlowActionOfPopMpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ethertype uint32 `protobuf:"varint,1,opt,name=ethertype,proto3" json:"ethertype,omitempty"` //*< EtherType.
}

func (x *RteFlowActionOfPopMpls) Reset() {
	*x = RteFlowActionOfPopMpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionOfPopMpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionOfPopMpls) ProtoMessage() {}

func (x *RteFlowActionOfPopMpls) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionOfPopMpls.ProtoReflect.Descriptor instead.
func (*RteFlowActionOfPopMpls) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{73}
}

func (x *RteFlowActionOfPopMpls) GetEthertype() uint32 {
	if x != nil {
		return x.Ethertype
	}
	return 0
}

type RteFlowActionOfPushMpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ethertype uint32 `protobuf:"varint,1,opt,name=ethertype,proto3" json:"ethertype,omitempty"` //*< EtherType.
}

func (x *RteFlowActionOfPushMpls) Reset() {
	*x = RteFlowActionOfPushMpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionOfPushMpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionOfPushMpls) ProtoMessage() {}

func (x *RteFlowActionOfPushMpls) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionOfPushMpls.ProtoReflect.Descriptor instead.
func (*RteFlowActionOfPushMpls) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{74}
}

func (x *RteFlowActionOfPushMpls) GetEthertype() uint32 {
	if x != nil {
		return x.Ethertype
	}
	return 0
}

type RteFlowActionVxlanEncap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Encapsulating vxlan tunnel definition
	// (terminated by the END pattern item).
	Definition *RteFlowItem `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *RteFlowActionVxlanEncap) Reset() {
	*x = RteFlowActionVxlanEncap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionVxlanEncap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionVxlanEncap) ProtoMessage() {}

func (x *RteFlowActionVxlanEncap) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionVxlanEncap.ProtoReflect.Descriptor instead.
func (*RteFlowActionVxlanEncap) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{75}
}

func (x *RteFlowActionVxlanEncap) GetDefinition() *RteFlowItem {
	if x != nil {
		return x.Definition
	}
	return nil
}

type RteFlowActionNvgreEncap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Encapsulating vxlan tunnel definition
	// (terminated by the END pattern item).
	Definition *RteFlowItem `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *RteFlowActionNvgreEncap) Reset() {
	*x = RteFlowActionNvgreEncap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionNvgreEncap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionNvgreEncap) ProtoMessage() {}

func (x *RteFlowActionNvgreEncap) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionNvgreEncap.ProtoReflect.Descriptor instead.
func (*RteFlowActionNvgreEncap) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{76}
}

func (x *RteFlowActionNvgreEncap) GetDefinition() *RteFlowItem {
	if x != nil {
		return x.Definition
	}
	return nil
}

type RteFlowActionRawEncap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     uint32 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`         //*< Encapsulation data.
	Preserve uint32 `protobuf:"varint,2,opt,name=preserve,proto3" json:"preserve,omitempty"` //*< Bit-mask of @p data to preserve on output.
	Size     uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`         //*< Size of @p data and @p preserve.
}

func (x *RteFlowActionRawEncap) Reset() {
	*x = RteFlowActionRawEncap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionRawEncap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionRawEncap) ProtoMessage() {}

func (x *RteFlowActionRawEncap) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionRawEncap.ProtoReflect.Descriptor instead.
func (*RteFlowActionRawEncap) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{77}
}

func (x *RteFlowActionRawEncap) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *RteFlowActionRawEncap) GetPreserve() uint32 {
	if x != nil {
		return x.Preserve
	}
	return 0
}

func (x *RteFlowActionRawEncap) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type RteFlowActionRawDecap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint32 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"` //*< Encapsulation data.
	Size uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"` //*< Size of @p data and @p preserve.
}

func (x *RteFlowActionRawDecap) Reset() {
	*x = RteFlowActionRawDecap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionRawDecap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionRawDecap) ProtoMessage() {}

func (x *RteFlowActionRawDecap) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionRawDecap.ProtoReflect.Descriptor instead.
func (*RteFlowActionRawDecap) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{78}
}

func (x *RteFlowActionRawDecap) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *RteFlowActionRawDecap) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type RteFlowActionSetIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Addr uint32 `protobuf:"varint,1,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`
}

func (x *RteFlowActionSetIpv4) Reset() {
	*x = RteFlowActionSetIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSetIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSetIpv4) ProtoMessage() {}

func (x *RteFlowActionSetIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSetIpv4.ProtoReflect.Descriptor instead.
func (*RteFlowActionSetIpv4) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{79}
}

func (x *RteFlowActionSetIpv4) GetIpv4Addr() uint32 {
	if x != nil {
		return x.Ipv4Addr
	}
	return 0
}

type RteFlowActionSetIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6Addr []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_addr,json=ipv6Addr,proto3" json:"ipv6_addr,omitempty"`
}

func (x *RteFlowActionSetIpv6) Reset() {
	*x = RteFlowActionSetIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSetIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSetIpv6) ProtoMessage() {}

func (x *RteFlowActionSetIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSetIpv6.ProtoReflect.Descriptor instead.
func (*RteFlowActionSetIpv6) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{80}
}

func (x *RteFlowActionSetIpv6) GetIpv6Addr() []uint32 {
	if x != nil {
		return x.Ipv6Addr
	}
	return nil
}

type RteFlowActionSetTp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RteFlowActionSetTp) Reset() {
	*x = RteFlowActionSetTp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSetTp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSetTp) ProtoMessage() {}

func (x *RteFlowActionSetTp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSetTp.ProtoReflect.Descriptor instead.
func (*RteFlowActionSetTp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{81}
}

func (x *RteFlowActionSetTp) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RteFlowActionSetTtl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtlValue uint32 `protobuf:"varint,1,opt,name=ttl_value,json=ttlValue,proto3" json:"ttl_value,omitempty"`
}

func (x *RteFlowActionSetTtl) Reset() {
	*x = RteFlowActionSetTtl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSetTtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSetTtl) ProtoMessage() {}

func (x *RteFlowActionSetTtl) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSetTtl.ProtoReflect.Descriptor instead.
func (*RteFlowActionSetTtl) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{82}
}

func (x *RteFlowActionSetTtl) GetTtlValue() uint32 {
	if x != nil {
		return x.TtlValue
	}
	return 0
}

type RteFlowActionSetMac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddrf []uint32 `protobuf:"varint,1,rep,packed,name=mac_addrf,json=macAddrf,proto3" json:"mac_addrf,omitempty"`
}

func (x *RteFlowActionSetMac) Reset() {
	*x = RteFlowActionSetMac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSetMac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSetMac) ProtoMessage() {}

func (x *RteFlowActionSetMac) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSetMac.ProtoReflect.Descriptor instead.
func (*RteFlowActionSetMac) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{83}
}

func (x *RteFlowActionSetMac) GetMacAddrf() []uint32 {
	if x != nil {
		return x.MacAddrf
	}
	return nil
}

type RteFlowActionSetTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  uint32 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	Mask  uint32 `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RteFlowActionSetTag) Reset() {
	*x = RteFlowActionSetTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSetTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSetTag) ProtoMessage() {}

func (x *RteFlowActionSetTag) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSetTag.ProtoReflect.Descriptor instead.
func (*RteFlowActionSetTag) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{84}
}

func (x *RteFlowActionSetTag) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *RteFlowActionSetTag) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *RteFlowActionSetTag) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RteFlowActionSetMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint32 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	Mask uint32 `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *RteFlowActionSetMeta) Reset() {
	*x = RteFlowActionSetMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSetMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSetMeta) ProtoMessage() {}

func (x *RteFlowActionSetMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSetMeta.ProtoReflect.Descriptor instead.
func (*RteFlowActionSetMeta) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{85}
}

func (x *RteFlowActionSetMeta) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *RteFlowActionSetMeta) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

type RteFlowActionSetDscp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dscp uint32 `protobuf:"varint,1,opt,name=dscp,proto3" json:"dscp,omitempty"`
}

func (x *RteFlowActionSetDscp) Reset() {
	*x = RteFlowActionSetDscp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowActionSetDscp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowActionSetDscp) ProtoMessage() {}

func (x *RteFlowActionSetDscp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowActionSetDscp.ProtoReflect.Descriptor instead.
func (*RteFlowActionSetDscp) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{86}
}

func (x *RteFlowActionSetDscp) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

type RteFlowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RteFlowActionType `protobuf:"varint,1,opt,name=type,proto3,enum=flow.RteFlowActionType" json:"type,omitempty"`
	Conf *anypb.Any        `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (x *RteFlowAction) Reset() {
	*x = RteFlowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowAction) ProtoMessage() {}

func (x *RteFlowAction) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowAction.ProtoReflect.Descriptor instead.
func (*RteFlowAction) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{87}
}

func (x *RteFlowAction) GetType() RteFlowActionType {
	if x != nil {
		return x.Type
	}
	return RteFlowActionType_RTE_FLOW_ACTION_TYPE_END
}

func (x *RteFlowAction) GetConf() *anypb.Any {
	if x != nil {
		return x.Conf
	}
	return nil
}

type RteFlowError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  RteFlowErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=flow.RteFlowErrorType" json:"type,omitempty"`
	Cause *anypb.Any       `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"` // Object responsible for the error.
	Mesg  string           `protobuf:"bytes,3,opt,name=mesg,proto3" json:"mesg,omitempty"`   //Human-readable error message.
}

func (x *RteFlowError) Reset() {
	*x = RteFlowError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowError) ProtoMessage() {}

func (x *RteFlowError) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowError.ProtoReflect.Descriptor instead.
func (*RteFlowError) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{88}
}

func (x *RteFlowError) GetType() RteFlowErrorType {
	if x != nil {
		return x.Type
	}
	return RteFlowErrorType_RTE_FLOW_ERROR_TYPE_NONE
}

func (x *RteFlowError) GetCause() *anypb.Any {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *RteFlowError) GetMesg() string {
	if x != nil {
		return x.Mesg
	}
	return ""
}

type RteFlowListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId      uint32 `protobuf:"varint,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RteFlowListResult) Reset() {
	*x = RteFlowListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RteFlowListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RteFlowListResult) ProtoMessage() {}

func (x *RteFlowListResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RteFlowListResult.ProtoReflect.Descriptor instead.
func (*RteFlowListResult) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{89}
}

func (x *RteFlowListResult) GetFlowId() uint32 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *RteFlowListResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// request of create and validate
type RequestFlowCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId  uint32           `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Attr    *RteFlowAttr     `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
	Pattern []*RteFlowItem   `protobuf:"bytes,3,rep,name=pattern,proto3" json:"pattern,omitempty"`
	Action  []*RteFlowAction `protobuf:"bytes,4,rep,name=action,proto3" json:"action,omitempty"`
}

func (x *RequestFlowCreate) Reset() {
	*x = RequestFlowCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFlowCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFlowCreate) ProtoMessage() {}

func (x *RequestFlowCreate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFlowCreate.ProtoReflect.Descriptor instead.
func (*RequestFlowCreate) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{90}
}

func (x *RequestFlowCreate) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *RequestFlowCreate) GetAttr() *RteFlowAttr {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *RequestFlowCreate) GetPattern() []*RteFlowItem {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *RequestFlowCreate) GetAction() []*RteFlowAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// request of query and destroy
type RequestFlowofPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId uint32 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	FlowId uint32 `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
}

func (x *RequestFlowofPort) Reset() {
	*x = RequestFlowofPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFlowofPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFlowofPort) ProtoMessage() {}

func (x *RequestFlowofPort) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFlowofPort.ProtoReflect.Descriptor instead.
func (*RequestFlowofPort) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{91}
}

func (x *RequestFlowofPort) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *RequestFlowofPort) GetFlowId() uint32 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

// request of list and flush
type RequestofPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId uint32 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (x *RequestofPort) Reset() {
	*x = RequestofPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestofPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestofPort) ProtoMessage() {}

func (x *RequestofPort) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestofPort.ProtoReflect.Descriptor instead.
func (*RequestofPort) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{92}
}

func (x *RequestofPort) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

// request of isolate
type RequestIsolate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId       uint32 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	IsolatedMode uint32 `protobuf:"varint,2,opt,name=isolated_mode,json=isolatedMode,proto3" json:"isolated_mode,omitempty"`
}

func (x *RequestIsolate) Reset() {
	*x = RequestIsolate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestIsolate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestIsolate) ProtoMessage() {}

func (x *RequestIsolate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestIsolate.ProtoReflect.Descriptor instead.
func (*RequestIsolate) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{93}
}

func (x *RequestIsolate) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *RequestIsolate) GetIsolatedMode() uint32 {
	if x != nil {
		return x.IsolatedMode
	}
	return 0
}

type RequestListPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestListPorts) Reset() {
	*x = RequestListPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestListPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestListPorts) ProtoMessage() {}

func (x *RequestListPorts) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestListPorts.ProtoReflect.Descriptor instead.
func (*RequestListPorts) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{94}
}

type PortsInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId   uint32 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	PortPci  string `protobuf:"bytes,2,opt,name=port_pci,json=portPci,proto3" json:"port_pci,omitempty"`
	PortMode string `protobuf:"bytes,3,opt,name=port_mode,json=portMode,proto3" json:"port_mode,omitempty"`
}

func (x *PortsInformation) Reset() {
	*x = PortsInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortsInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortsInformation) ProtoMessage() {}

func (x *PortsInformation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortsInformation.ProtoReflect.Descriptor instead.
func (*PortsInformation) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{95}
}

func (x *PortsInformation) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *PortsInformation) GetPortPci() string {
	if x != nil {
		return x.PortPci
	}
	return ""
}

func (x *PortsInformation) GetPortMode() string {
	if x != nil {
		return x.PortMode
	}
	return ""
}

type ResponseFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorInfo *RteFlowError `protobuf:"bytes,1,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
}

func (x *ResponseFlow) Reset() {
	*x = ResponseFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlow) ProtoMessage() {}

func (x *ResponseFlow) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlow.ProtoReflect.Descriptor instead.
func (*ResponseFlow) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{96}
}

func (x *ResponseFlow) GetErrorInfo() *RteFlowError {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

type ResponseFlowCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId    uint32        `protobuf:"varint,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	ErrorInfo *RteFlowError `protobuf:"bytes,2,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
}

func (x *ResponseFlowCreate) Reset() {
	*x = ResponseFlowCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFlowCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlowCreate) ProtoMessage() {}

func (x *ResponseFlowCreate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlowCreate.ProtoReflect.Descriptor instead.
func (*ResponseFlowCreate) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{97}
}

func (x *ResponseFlowCreate) GetFlowId() uint32 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *ResponseFlowCreate) GetErrorInfo() *RteFlowError {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

type ResponseFlowQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorInfo *RteFlowError      `protobuf:"bytes,1,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	Data      *RteFlowQueryCount `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseFlowQuery) Reset() {
	*x = ResponseFlowQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFlowQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlowQuery) ProtoMessage() {}

func (x *ResponseFlowQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlowQuery.ProtoReflect.Descriptor instead.
func (*ResponseFlowQuery) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{98}
}

func (x *ResponseFlowQuery) GetErrorInfo() *RteFlowError {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

func (x *ResponseFlowQuery) GetData() *RteFlowQueryCount {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseFlowList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RteFlowListResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ResponseFlowList) Reset() {
	*x = ResponseFlowList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFlowList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlowList) ProtoMessage() {}

func (x *ResponseFlowList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlowList.ProtoReflect.Descriptor instead.
func (*ResponseFlowList) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{99}
}

func (x *ResponseFlowList) GetResults() []*RteFlowListResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type ResponsePortList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ports []*PortsInformation `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *ResponsePortList) Reset() {
	*x = ResponsePortList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePortList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePortList) ProtoMessage() {}

func (x *ResponsePortList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePortList.ProtoReflect.Descriptor instead.
func (*ResponsePortList) Descriptor() ([]byte, []int) {
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP(), []int{100}
}

func (x *ResponsePortList) GetPorts() []*PortsInformation {
	if x != nil {
		return x.Ports
	}
	return nil
}

var File_pkg_flowconfig_rpc_v1_flow_flow_proto protoreflect.FileDescriptor

var file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6b, 0x67, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x72, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x2f,
	0x0a, 0x14, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x25, 0x0a, 0x11, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x61, 0x6e, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x22, 0x0a, 0x10, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x16, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x68, 0x79, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x27, 0x0a, 0x15, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x2f, 0x0a, 0x0e, 0x72, 0x74, 0x65,
	0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x11, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x12, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x63, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x0c, 0x72,
	0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x68, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x68, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x68, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x64, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x64, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0x3a, 0x0a, 0x12,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x12, 0x24, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x68, 0x64, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x72, 0x74, 0x65,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x68, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x74, 0x63,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x74, 0x63,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x72,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x22, 0x3a, 0x0a, 0x12, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x12, 0x24, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x68, 0x64, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x22, 0xa6, 0x01, 0x0a,
	0x0c, 0x72, 0x74, 0x65, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63,
	0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69,
	0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x63, 0x6d,
	0x70, 0x43, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70,
	0x53, 0x65, 0x71, 0x4e, 0x62, 0x22, 0x3a, 0x0a, 0x12, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x03, 0x68,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x72, 0x74, 0x65, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x52, 0x03, 0x68, 0x64,
	0x72, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x72, 0x74, 0x65, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x68, 0x64,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x67, 0x72, 0x61,
	0x6d, 0x4c, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x67, 0x72, 0x61, 0x6d,
	0x43, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x38, 0x0a, 0x11, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x64, 0x70, 0x12, 0x23, 0x0a, 0x03, 0x68, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72,
	0x74, 0x65, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x22,
	0xf7, 0x01, 0x0a, 0x0b, 0x72, 0x74, 0x65, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x76, 0x41, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x78, 0x57, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x75, 0x72, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x63, 0x70, 0x55, 0x72, 0x70, 0x22, 0x38, 0x0a, 0x11, 0x72, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x63, 0x70, 0x12, 0x23,
	0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x52, 0x03,
	0x68, 0x64, 0x72, 0x22, 0x6c, 0x0a, 0x0c, 0x72, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x74, 0x70, 0x5f,
	0x68, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x22, 0x3a, 0x0a, 0x12, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x63, 0x74, 0x70, 0x12, 0x24, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f,
	0x73, 0x63, 0x74, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x22, 0x69, 0x0a,
	0x13, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73,
	0x76, 0x64, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x73, 0x76, 0x64, 0x30,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76,
	0x6e, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x76, 0x64, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x73, 0x76, 0x64, 0x31, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x72, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x12, 0x2c, 0x0a, 0x13, 0x65, 0x70, 0x63, 0x70, 0x5f, 0x65, 0x64, 0x65, 0x69, 0x5f, 0x69, 0x6e,
	0x5f, 0x65, 0x63, 0x69, 0x64, 0x5f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65,
	0x70, 0x63, 0x70, 0x45, 0x64, 0x65, 0x69, 0x49, 0x6e, 0x45, 0x63, 0x69, 0x64, 0x42, 0x12, 0x25,
	0x0a, 0x0f, 0x72, 0x73, 0x76, 0x64, 0x5f, 0x67, 0x72, 0x70, 0x5f, 0x65, 0x63, 0x69, 0x64, 0x5f,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x73, 0x76, 0x64, 0x47, 0x72, 0x70,
	0x45, 0x63, 0x69, 0x64, 0x42, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x65, 0x63, 0x69, 0x64,
	0x5f, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x45, 0x63, 0x69, 0x64,
	0x45, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x63, 0x69, 0x64, 0x5f, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x63, 0x69, 0x64, 0x45, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x72, 0x74, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x76, 0x67, 0x72, 0x65, 0x12,
	0x24, 0x0a, 0x0f, 0x63, 0x5f, 0x6b, 0x5f, 0x73, 0x5f, 0x72, 0x73, 0x76, 0x64, 0x30, 0x5f, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x4b, 0x53, 0x52, 0x73, 0x76,
	0x64, 0x30, 0x56, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x74, 0x6e, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x63, 0x5f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x63, 0x53,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x22, 0x4f, 0x0a, 0x11, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x67, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x5f, 0x72, 0x73, 0x76,
	0x64, 0x30, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x52,
	0x73, 0x76, 0x64, 0x30, 0x56, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x22, 0x2d, 0x0a, 0x13, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x74, 0x70, 0x12, 0x23, 0x0a, 0x0e, 0x76, 0x5f, 0x70, 0x74,
	0x5f, 0x72, 0x73, 0x76, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x76, 0x50, 0x74, 0x52, 0x73, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x4c, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x65, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x0b, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x73, 0x70,
	0x5f, 0x68, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x38, 0x0a, 0x11, 0x72, 0x74, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a,
	0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x73, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x52, 0x03, 0x68,
	0x64, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x15, 0x76,
	0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6f, 0x5f, 0x63, 0x5f, 0x72,
	0x73, 0x76, 0x64, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x4c, 0x65, 0x6e, 0x4f, 0x43, 0x52, 0x73, 0x76, 0x64, 0x30, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73,
	0x76, 0x64, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x73, 0x76, 0x64, 0x31,
	0x22, 0x89, 0x01, 0x0a, 0x17, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x67, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x76, 0x64, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x72, 0x73, 0x76, 0x64, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x76, 0x64, 0x31, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x73, 0x76, 0x64, 0x31, 0x22, 0xe8, 0x01, 0x0a,
	0x1a, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61,
	0x72, 0x70, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x68,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x68, 0x72, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x72, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x68, 0x6c, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x68, 0x6c,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6c, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x6c, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x70, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x70, 0x61, 0x12, 0x26, 0x0a,
	0x03, 0x74, 0x68, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x52, 0x03, 0x74, 0x68, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x70, 0x61, 0x22, 0x33, 0x0a, 0x16, 0x72, 0x74, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x78,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x64, 0x72, 0x22, 0x59, 0x0a, 0x13,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x63,
	0x6d, 0x70, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x72, 0x74, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x36, 0x5f,
	0x6e, 0x64, 0x5f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x72, 0x74, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x36, 0x5f, 0x6e,
	0x64, 0x5f, 0x6e, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x73, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0x48, 0x0a, 0x1a,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x63,
	0x6d, 0x70, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x78, 0x0a, 0x22, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x36, 0x5f, 0x6e, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x03, 0x73, 0x6c, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65,
	0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x03, 0x73, 0x6c, 0x61,
	0x22, 0x78, 0x0a, 0x22, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x6c, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x03, 0x74, 0x6c, 0x61, 0x22, 0x24, 0x0a, 0x12, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x28, 0x0a, 0x12, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x15, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x74, 0x70, 0x5f,
	0x70, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x64, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x71, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x71, 0x66, 0x69,
	0x22, 0x83, 0x01, 0x0a, 0x13, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x39, 0x0a, 0x1c, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x49,
	0x64, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x61, 0x6d, 0x5f, 0x70, 0x6b, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6f, 0x61, 0x6d, 0x50, 0x6b, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x87, 0x01, 0x0a, 0x12, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x67, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x72, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x69, 0x67, 0x32,
	0x5f, 0x66, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x73, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6b, 0x73, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x63, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x63, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x65, 0x73, 0x76,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x73, 0x74, 0x50, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x4d, 0x6f,
	0x64, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x72, 0x63, 0x50, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x62, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x70, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x70, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x73, 0x76, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x76,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x64,
	0x70, 0x22, 0xa0, 0x04, 0x0a, 0x14, 0x72, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x69, 0x67, 0x32,
	0x5f, 0x70, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x73, 0x74, 0x5f, 0x74, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64,
	0x73, 0x74, 0x54, 0x67, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x74, 0x54, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x76, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x6c, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x33, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x76, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x76, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x69, 0x64,
	0x48, 0x69, 0x67, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x69, 0x64, 0x4c, 0x6f, 0x77, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x70, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72,
	0x65, 0x73, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x72, 0x63, 0x65, 0x54, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x66,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x70, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x73, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x65, 0x73, 0x32, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x64, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x64, 0x72, 0x45, 0x78, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x72, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x67,
	0x69, 0x67, 0x32, 0x5f, 0x70, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x65, 0x73, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x76, 0x31, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x72, 0x63,
	0x5f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x72, 0x63, 0x54, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x66, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x66, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x76, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x72, 0x65, 0x73, 0x76, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x64, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x64, 0x72,
	0x45, 0x78, 0x74, 0x4c, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x72, 0x74, 0x65, 0x5f, 0x68,
	0x69, 0x67, 0x69, 0x67, 0x32, 0x5f, 0x68, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x03, 0x66, 0x63, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74,
	0x65, 0x5f, 0x68, 0x69, 0x67, 0x69, 0x67, 0x32, 0x5f, 0x66, 0x72, 0x63, 0x52, 0x03, 0x66, 0x63,
	0x72, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x70, 0x74, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x69, 0x67,
	0x32, 0x5f, 0x70, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x30, 0x52, 0x04, 0x70, 0x70, 0x74,
	0x30, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x70, 0x74, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x69, 0x67,
	0x32, 0x5f, 0x70, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x52, 0x04, 0x70, 0x70, 0x74,
	0x31, 0x22, 0x42, 0x0a, 0x18, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x68, 0x69, 0x67, 0x69, 0x67, 0x32, 0x5f, 0x68, 0x64, 0x72, 0x12, 0x26, 0x0a,
	0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x69, 0x67, 0x32, 0x5f, 0x68, 0x64, 0x72,
	0x52, 0x03, 0x68, 0x64, 0x72, 0x22, 0x3d, 0x0a, 0x11, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x38, 0x0a, 0x17, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x32, 0x74, 0x70, 0x76, 0x33, 0x6f, 0x69, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbb,
	0x01, 0x0a, 0x0d, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6c, 0x61,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x26, 0x0a, 0x14,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x14, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x2d, 0x0a, 0x15, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x5b, 0x0a, 0x15, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa,
	0x01, 0x0a, 0x14, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x69, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x68, 0x69, 0x74, 0x73, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x13,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x66, 0x75, 0x6e, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x5c,
	0x0a, 0x12, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x18,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x68, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x61, 0x0a, 0x17, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x15, 0x72, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x74, 0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x18, 0x72, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x1f, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x70, 0x6c,
	0x73, 0x54, 0x74, 0x6c, 0x22, 0x36, 0x0a, 0x1d, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x77, 0x5f, 0x74, 0x74, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x77, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x77, 0x54, 0x74, 0x6c, 0x22, 0x3c, 0x0a, 0x1c,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x1f, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x56, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x1f, 0x72, 0x74, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x63, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x50, 0x63, 0x70, 0x22, 0x3b, 0x0a, 0x1b, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x70,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x1c, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x52, 0x0a, 0x1b, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x12, 0x33, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x1b, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x76, 0x67, 0x72, 0x65, 0x5f, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x19, 0x72, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x77,
	0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x77, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x37, 0x0a, 0x18, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x22, 0x37, 0x0a, 0x18, 0x72, 0x74, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x22, 0x2c, 0x0a, 0x16, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x36, 0x0a, 0x17, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x74,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74,
	0x74, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x17, 0x72, 0x74, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x66, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x66, 0x22,
	0x57, 0x0a, 0x17, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x42, 0x0a, 0x18, 0x72, 0x74, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x2e, 0x0a, 0x18,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x22, 0x6b, 0x0a, 0x0f,
	0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x22, 0x7f, 0x0a, 0x0e, 0x72, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x73, 0x67, 0x22, 0x51, 0x0a, 0x14, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x6f, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x63,
	0x69, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x43,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x33,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x78, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x48, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x72, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2a, 0xfd,
	0x0b, 0x0a, 0x12, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x54, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x46, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x46, 0x10, 0x05, 0x12,
	0x1f, 0x0a, 0x1b, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x07,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x4c, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x0c, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x43, 0x50, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x54, 0x50, 0x10,
	0x10, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10, 0x11, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x12, 0x12, 0x1c, 0x0a,
	0x18, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x56, 0x47, 0x52, 0x45, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x45, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x5a, 0x5a, 0x59,
	0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x54, 0x50, 0x10, 0x17, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x54, 0x50, 0x43, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x54, 0x50, 0x55, 0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x53, 0x50, 0x10, 0x1a, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x56,
	0x45, 0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f,
	0x47, 0x50, 0x45, 0x10, 0x1c, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x1d, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x54, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x10, 0x1f, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x54, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x4e, 0x44, 0x5f, 0x4e, 0x53, 0x10, 0x20, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x10,
	0x21, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x4e, 0x44,
	0x5f, 0x4f, 0x50, 0x54, 0x10, 0x22, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x43, 0x4d,
	0x50, 0x36, 0x5f, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x53, 0x4c, 0x41, 0x5f, 0x45, 0x54,
	0x48, 0x10, 0x23, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f,
	0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x4c, 0x41, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x24,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x25, 0x12, 0x1b, 0x0a,
	0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x26, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x52, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x27, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x54, 0x50, 0x5f, 0x50, 0x53, 0x43, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x50, 0x50, 0x4f, 0x45, 0x53, 0x10, 0x29, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x50, 0x50, 0x4f, 0x45, 0x44, 0x10, 0x2a, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x50, 0x50, 0x4f, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x44, 0x10, 0x2b, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x48, 0x10, 0x2c, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x48, 0x10, 0x2e, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x49, 0x47, 0x32,
	0x10, 0x2f, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x30, 0x2a, 0xd1,
	0x01, 0x0a, 0x15, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x54, 0x45, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x54, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x45, 0x50, 0x4c, 0x49, 0x54, 0x5a, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f,
	0x58, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x54, 0x45, 0x5f, 0x45, 0x54, 0x48,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x45, 0x50, 0x4c, 0x49, 0x54,
	0x5a, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x04, 0x2a, 0xcd, 0x0e, 0x0a, 0x14, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x54, 0x48, 0x52, 0x55, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x54, 0x45, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x54, 0x45, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x53, 0x53, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x46,
	0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x46, 0x10, 0x0b, 0x12,
	0x21, 0x0a, 0x1d, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x0f, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x54, 0x45, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x54, 0x4c, 0x10,
	0x10, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x45, 0x43,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x57, 0x5f, 0x54, 0x54,
	0x4c, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44,
	0x45, 0x43, 0x5f, 0x4e, 0x57, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x54, 0x54, 0x4c, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x14, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x49, 0x4e, 0x10, 0x15, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x56, 0x4c,
	0x41, 0x4e, 0x10, 0x16, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x17, 0x12, 0x28, 0x0a, 0x24, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x56, 0x49, 0x44, 0x10, 0x18, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x43, 0x50, 0x10, 0x19, 0x12,
	0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x1b, 0x12, 0x24, 0x0a, 0x20,
	0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50,
	0x10, 0x1c, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e,
	0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x10, 0x1d, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x56, 0x47, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x10, 0x1e, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x56, 0x47, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x43,
	0x41, 0x50, 0x10, 0x1f, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x57,
	0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x10, 0x20, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x41, 0x57, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x10, 0x21, 0x12, 0x25, 0x0a, 0x21,
	0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x52,
	0x43, 0x10, 0x22, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x44, 0x53, 0x54, 0x10, 0x23, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x53, 0x52, 0x43, 0x10,
	0x24, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x44, 0x53, 0x54, 0x10, 0x25, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x50, 0x5f, 0x53, 0x52, 0x43, 0x10, 0x26, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x50, 0x5f, 0x44, 0x53, 0x54,
	0x10, 0x27, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x53,
	0x57, 0x41, 0x50, 0x10, 0x28, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x43, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x29, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x54, 0x45, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x2a, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x54, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x52, 0x43, 0x10, 0x2b, 0x12,
	0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x5f,
	0x44, 0x53, 0x54, 0x10, 0x2c, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x43, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x45, 0x51, 0x10, 0x2d, 0x12, 0x24, 0x0a, 0x20, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x45, 0x51, 0x10,
	0x2e, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x5f, 0x54, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x2f, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x43, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x30, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x31, 0x12,
	0x21, 0x0a, 0x1d, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41,
	0x10, 0x32, 0x2a, 0xe5, 0x04, 0x0a, 0x13, 0x72, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x03, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x23,
	0x0a, 0x1f, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x54, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x10, 0x0a, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x0b,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x53,
	0x4b, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10,
	0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x55, 0x4d, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x32, 0xdf, 0x03, 0x0a, 0x0b, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a,
	0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12,
	0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x6f, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x6f, 0x66, 0x50, 0x6f, 0x72, 0x74,
	0x1a, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x6f, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x13, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x66, 0x50, 0x6f, 0x72, 0x74,
	0x1a, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x07, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x1a, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescOnce sync.Once
	file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescData = file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDesc
)

func file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescGZIP() []byte {
	file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescOnce.Do(func() {
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescData)
	})
	return file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDescData
}

var file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_pkg_flowconfig_rpc_v1_flow_flow_proto_goTypes = []interface{}{
	(RteFlowItemType)(0),                // 0: flow.rte_flow_item_type
	(RteEthHashFunction)(0),             // 1: flow.rte_eth_hash_function
	(RteFlowActionType)(0),              // 2: flow.rte_flow_action_type
	(RteFlowErrorType)(0),               // 3: flow.rte_flow_error_type
	(*RteFlowAttr)(nil),                 // 4: flow.rte_flow_attr
	(*GreKeyDefaultMask)(nil),           // 5: flow.gre_key_default_mask
	(*RteFlowItemAny)(nil),              // 6: flow.rte_flow_item_any
	(*RteFlowItemVf)(nil),               // 7: flow.rte_flow_item_vf
	(*RteFlowItemPhyPort)(nil),          // 8: flow.rte_flow_item_phy_port
	(*RteFlowItemPortId)(nil),           // 9: flow.rte_flow_item_port_id
	(*RteFlowItemRaw)(nil),              // 10: flow.rte_flow_item_raw
	(*RteEtherAddr)(nil),                // 11: flow.rte_ether_addr
	(*RteFlowItemEth)(nil),              // 12: flow.rte_flow_item_eth
	(*RteFlowItemVlan)(nil),             // 13: flow.rte_flow_item_vlan
	(*RteIpv4Hdr)(nil),                  // 14: flow.rte_ipv4_hdr
	(*RteFlowItemIpv4)(nil),             // 15: flow.rte_flow_item_ipv4
	(*RteIpv6Hdr)(nil),                  // 16: flow.rte_ipv6_hdr
	(*RteFlowItemIpv6)(nil),             // 17: flow.rte_flow_item_ipv6
	(*RteIcmpHdr)(nil),                  // 18: flow.rte_icmp_hdr
	(*RteFlowItemIcmp)(nil),             // 19: flow.rte_flow_item_icmp
	(*RteUdpHdr)(nil),                   // 20: flow.rte_udp_hdr
	(*RteFlowItemUdp)(nil),              // 21: flow.rte_flow_item_udp
	(*RteTcpHdr)(nil),                   // 22: flow.rte_tcp_hdr
	(*RteFlowItemTcp)(nil),              // 23: flow.rte_flow_item_tcp
	(*RteSctpHdr)(nil),                  // 24: flow.rte_sctp_hdr
	(*RteFlowItemSctp)(nil),             // 25: flow.rte_flow_item_sctp
	(*RteFlowItemVxlan)(nil),            // 26: flow.rte_flow_item_vxlan
	(*RteFlowItemETag)(nil),             // 27: flow.rte_flow_item_e_tag
	(*RteFlowItemNvgre)(nil),            // 28: flow.rte_flow_item_nvgre
	(*RteFlowItemMpls)(nil),             // 29: flow.rte_flow_item_mpls
	(*RteFlowItemGre)(nil),              // 30: flow.rte_flow_item_gre
	(*RteFlowItemFuzzy)(nil),            // 31: flow.rte_flow_item_fuzzy
	(*RteFlowItemGtp)(nil),              // 32: flow.rte_flow_item_gtp
	(*RteEspHdr)(nil),                   // 33: flow.rte_esp_hdr
	(*RteFlowItemEsp)(nil),              // 34: flow.rte_flow_item_esp
	(*RteFlowItemGeneve)(nil),           // 35: flow.rte_flow_item_geneve
	(*RteFlowItemVxlanGpe)(nil),         // 36: flow.rte_flow_item_vxlan_gpe
	(*RteFlowItemArpEthIpv4)(nil),       // 37: flow.rte_flow_item_arp_eth_ipv4
	(*RteFlowItemIpv6Ext)(nil),          // 38: flow.rte_flow_item_ipv6_ext
	(*RteFlowItemIcmp6)(nil),            // 39: flow.rte_flow_item_icmp6
	(*RteFlowItemIcmp6NdNs)(nil),        // 40: flow.rte_flow_item_icmp6_nd_ns
	(*RteFlowItemIcmp6NdNa)(nil),        // 41: flow.rte_flow_item_icmp6_nd_na
	(*RteFlowItemIcmp6NdOpt)(nil),       // 42: flow.rte_flow_item_icmp6_nd_opt
	(*RteFlowItemIcmp6NdOptSlaEth)(nil), // 43: flow.rte_flow_item_icmp6_nd_opt_sla_eth
	(*RteFlowItemIcmp6NdOptStaEth)(nil), // 44: flow.rte_flow_item_icmp6_nd_opt_sta_eth
	(*RteFlowItemMark)(nil),             // 45: flow.rte_flow_item_mark
	(*RteFlowItemMeta)(nil),             // 46: flow.rte_flow_item_meta
	(*RteFlowItemGtpPsc)(nil),           // 47: flow.rte_flow_item_gtp_psc
	(*RteFlowItemPppoe)(nil),            // 48: flow.rte_flow_item_pppoe
	(*RteFlowItemPppoeProtoId)(nil),     // 49: flow.rte_flow_item_pppoe_proto_id
	(*RteFlowItemNsh)(nil),              // 50: flow.rte_flow_item_nsh
	(*RteFlowItemIgmp)(nil),             // 51: flow.rte_flow_item_igmp
	(*RteFlowItemAh)(nil),               // 52: flow.rte_flow_item_ah
	(*RteHigig2Frc)(nil),                // 53: flow.rte_higig2_frc
	(*RteHigig2PptType0)(nil),           // 54: flow.rte_higig2_ppt_type0
	(*RteHigig2PptType1)(nil),           // 55: flow.rte_higig2_ppt_type1
	(*RteHigig2Hdr)(nil),                // 56: flow.rte_higig2_hdr
	(*RteFlowItemHigig2Hdr)(nil),        // 57: flow.rte_flow_item_higig2_hdr
	(*RteFlowItemTag)(nil),              // 58: flow.rte_flow_item_tag
	(*RteFlowItemL2Tpv3Oip)(nil),        // 59: flow.rte_flow_item_l2tpv3oip
	(*RteFlowItem)(nil),                 // 60: flow.rte_flow_item
	(*RteFlowActionMark)(nil),           // 61: flow.rte_flow_action_mark
	(*RteFlowActionJump)(nil),           // 62: flow.rte_flow_action_jump
	(*RteFlowActionQueue)(nil),          // 63: flow.rte_flow_action_queue
	(*RteFlowActionCount)(nil),          // 64: flow.rte_flow_action_count
	(*RteFlowQueryCount)(nil),           // 65: flow.rte_flow_query_count
	(*RteFlowActionRss)(nil),            // 66: flow.rte_flow_action_rss
	(*RteFlowActionVf)(nil),             // 67: flow.rte_flow_action_vf
	(*RteFlowActionPhyPort)(nil),        // 68: flow.rte_flow_action_phy_port
	(*RteFlowActionPortId)(nil),         // 69: flow.rte_flow_action_port_id
	(*RteFlowActionMeter)(nil),          // 70: flow.rte_flow_action_meter
	(*RteFlowActionSecurity)(nil),       // 71: flow.rte_flow_action_security
	(*RteFlowActionOfSetMplsTtl)(nil),   // 72: flow.rte_flow_action_of_set_mpls_ttl
	(*RteFlowActionOfSetNwTtl)(nil),     // 73: flow.rte_flow_action_of_set_nw_ttl
	(*RteFlowActionOfPushVlan)(nil),     // 74: flow.rte_flow_action_of_push_vlan
	(*RteFlowActionOfSetVlanVid)(nil),   // 75: flow.rte_flow_action_of_set_vlan_vid
	(*RteFlowActionOfSetVlanPcp)(nil),   // 76: flow.rte_flow_action_of_set_vlan_pcp
	(*RteFlowActionOfPopMpls)(nil),      // 77: flow.rte_flow_action_of_pop_mpls
	(*RteFlowActionOfPushMpls)(nil),     // 78: flow.rte_flow_action_of_push_mpls
	(*RteFlowActionVxlanEncap)(nil),     // 79: flow.rte_flow_action_vxlan_encap
	(*RteFlowActionNvgreEncap)(nil),     // 80: flow.rte_flow_action_nvgre_encap
	(*RteFlowActionRawEncap)(nil),       // 81: flow.rte_flow_action_raw_encap
	(*RteFlowActionRawDecap)(nil),       // 82: flow.rte_flow_action_raw_decap
	(*RteFlowActionSetIpv4)(nil),        // 83: flow.rte_flow_action_set_ipv4
	(*RteFlowActionSetIpv6)(nil),        // 84: flow.rte_flow_action_set_ipv6
	(*RteFlowActionSetTp)(nil),          // 85: flow.rte_flow_action_set_tp
	(*RteFlowActionSetTtl)(nil),         // 86: flow.rte_flow_action_set_ttl
	(*RteFlowActionSetMac)(nil),         // 87: flow.rte_flow_action_set_mac
	(*RteFlowActionSetTag)(nil),         // 88: flow.rte_flow_action_set_tag
	(*RteFlowActionSetMeta)(nil),        // 89: flow.rte_flow_action_set_meta
	(*RteFlowActionSetDscp)(nil),        // 90: flow.rte_flow_action_set_dscp
	(*RteFlowAction)(nil),               // 91: flow.rte_flow_action
	(*RteFlowError)(nil),                // 92: flow.rte_flow_error
	(*RteFlowListResult)(nil),           // 93: flow.rte_flow_list_result
	(*RequestFlowCreate)(nil),           // 94: flow.RequestFlowCreate
	(*RequestFlowofPort)(nil),           // 95: flow.RequestFlowofPort
	(*RequestofPort)(nil),               // 96: flow.RequestofPort
	(*RequestIsolate)(nil),              // 97: flow.RequestIsolate
	(*RequestListPorts)(nil),            // 98: flow.RequestListPorts
	(*PortsInformation)(nil),            // 99: flow.ports_information
	(*ResponseFlow)(nil),                // 100: flow.ResponseFlow
	(*ResponseFlowCreate)(nil),          // 101: flow.ResponseFlowCreate
	(*ResponseFlowQuery)(nil),           // 102: flow.ResponseFlowQuery
	(*ResponseFlowList)(nil),            // 103: flow.ResponseFlowList
	(*ResponsePortList)(nil),            // 104: flow.ResponsePortList
	(*anypb.Any)(nil),                   // 105: google.protobuf.Any
}
var file_pkg_flowconfig_rpc_v1_flow_flow_proto_depIdxs = []int32{
	11,  // 0: flow.rte_flow_item_eth.dst:type_name -> flow.rte_ether_addr
	11,  // 1: flow.rte_flow_item_eth.src:type_name -> flow.rte_ether_addr
	14,  // 2: flow.rte_flow_item_ipv4.hdr:type_name -> flow.rte_ipv4_hdr
	16,  // 3: flow.rte_flow_item_ipv6.hdr:type_name -> flow.rte_ipv6_hdr
	18,  // 4: flow.rte_flow_item_icmp.hdr:type_name -> flow.rte_icmp_hdr
	20,  // 5: flow.rte_flow_item_udp.hdr:type_name -> flow.rte_udp_hdr
	22,  // 6: flow.rte_flow_item_tcp.hdr:type_name -> flow.rte_tcp_hdr
	24,  // 7: flow.rte_flow_item_sctp.hdr:type_name -> flow.rte_sctp_hdr
	33,  // 8: flow.rte_flow_item_esp.hdr:type_name -> flow.rte_esp_hdr
	11,  // 9: flow.rte_flow_item_arp_eth_ipv4.sha:type_name -> flow.rte_ether_addr
	11,  // 10: flow.rte_flow_item_arp_eth_ipv4.tha:type_name -> flow.rte_ether_addr
	11,  // 11: flow.rte_flow_item_icmp6_nd_opt_sla_eth.sla:type_name -> flow.rte_ether_addr
	11,  // 12: flow.rte_flow_item_icmp6_nd_opt_sta_eth.tla:type_name -> flow.rte_ether_addr
	53,  // 13: flow.rte_higig2_hdr.fcr:type_name -> flow.rte_higig2_frc
	54,  // 14: flow.rte_higig2_hdr.ppt0:type_name -> flow.rte_higig2_ppt_type0
	55,  // 15: flow.rte_higig2_hdr.ppt1:type_name -> flow.rte_higig2_ppt_type1
	56,  // 16: flow.rte_flow_item_higig2_hdr.hdr:type_name -> flow.rte_higig2_hdr
	0,   // 17: flow.rte_flow_item.type:type_name -> flow.rte_flow_item_type
	105, // 18: flow.rte_flow_item.spec:type_name -> google.protobuf.Any
	105, // 19: flow.rte_flow_item.last:type_name -> google.protobuf.Any
	105, // 20: flow.rte_flow_item.mask:type_name -> google.protobuf.Any
	1,   // 21: flow.rte_flow_action_rss.func:type_name -> flow.rte_eth_hash_function
	105, // 22: flow.rte_flow_action_security.security_session:type_name -> google.protobuf.Any
	60,  // 23: flow.rte_flow_action_vxlan_encap.definition:type_name -> flow.rte_flow_item
	60,  // 24: flow.rte_flow_action_nvgre_encap.definition:type_name -> flow.rte_flow_item
	2,   // 25: flow.rte_flow_action.type:type_name -> flow.rte_flow_action_type
	105, // 26: flow.rte_flow_action.conf:type_name -> google.protobuf.Any
	3,   // 27: flow.rte_flow_error.type:type_name -> flow.rte_flow_error_type
	105, // 28: flow.rte_flow_error.cause:type_name -> google.protobuf.Any
	4,   // 29: flow.RequestFlowCreate.attr:type_name -> flow.rte_flow_attr
	60,  // 30: flow.RequestFlowCreate.pattern:type_name -> flow.rte_flow_item
	91,  // 31: flow.RequestFlowCreate.action:type_name -> flow.rte_flow_action
	92,  // 32: flow.ResponseFlow.error_info:type_name -> flow.rte_flow_error
	92,  // 33: flow.ResponseFlowCreate.error_info:type_name -> flow.rte_flow_error
	92,  // 34: flow.ResponseFlowQuery.error_info:type_name -> flow.rte_flow_error
	65,  // 35: flow.ResponseFlowQuery.data:type_name -> flow.rte_flow_query_count
	93,  // 36: flow.ResponseFlowList.results:type_name -> flow.rte_flow_list_result
	99,  // 37: flow.ResponsePortList.ports:type_name -> flow.ports_information
	94,  // 38: flow.FlowService.Validate:input_type -> flow.RequestFlowCreate
	94,  // 39: flow.FlowService.Create:input_type -> flow.RequestFlowCreate
	95,  // 40: flow.FlowService.Destroy:input_type -> flow.RequestFlowofPort
	95,  // 41: flow.FlowService.Query:input_type -> flow.RequestFlowofPort
	96,  // 42: flow.FlowService.List:input_type -> flow.RequestofPort
	96,  // 43: flow.FlowService.Flush:input_type -> flow.RequestofPort
	97,  // 44: flow.FlowService.Isolate:input_type -> flow.RequestIsolate
	98,  // 45: flow.FlowService.ListPorts:input_type -> flow.RequestListPorts
	100, // 46: flow.FlowService.Validate:output_type -> flow.ResponseFlow
	101, // 47: flow.FlowService.Create:output_type -> flow.ResponseFlowCreate
	100, // 48: flow.FlowService.Destroy:output_type -> flow.ResponseFlow
	102, // 49: flow.FlowService.Query:output_type -> flow.ResponseFlowQuery
	103, // 50: flow.FlowService.List:output_type -> flow.ResponseFlowList
	100, // 51: flow.FlowService.Flush:output_type -> flow.ResponseFlow
	100, // 52: flow.FlowService.Isolate:output_type -> flow.ResponseFlow
	104, // 53: flow.FlowService.ListPorts:output_type -> flow.ResponsePortList
	46,  // [46:54] is the sub-list for method output_type
	38,  // [38:46] is the sub-list for method input_type
	38,  // [38:38] is the sub-list for extension type_name
	38,  // [38:38] is the sub-list for extension extendee
	0,   // [0:38] is the sub-list for field type_name
}

func init() { file_pkg_flowconfig_rpc_v1_flow_flow_proto_init() }
func file_pkg_flowconfig_rpc_v1_flow_flow_proto_init() {
	if File_pkg_flowconfig_rpc_v1_flow_flow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreKeyDefaultMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemVf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemPhyPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemPortId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteEtherAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemEth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteIpv4Hdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteIpv6Hdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteIcmpHdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIcmp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteUdpHdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemUdp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteTcpHdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemTcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteSctpHdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemSctp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemVxlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemETag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemNvgre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemMpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemGre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemFuzzy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemGtp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteEspHdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemEsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemGeneve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemVxlanGpe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemArpEthIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIpv6Ext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIcmp6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIcmp6NdNs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIcmp6NdNa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIcmp6NdOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIcmp6NdOptSlaEth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIcmp6NdOptStaEth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemGtpPsc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemPppoe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemPppoeProtoId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemNsh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemIgmp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemAh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteHigig2Frc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteHigig2PptType0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteHigig2PptType1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteHigig2Hdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemHigig2Hdr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItemL2Tpv3Oip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionJump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowQueryCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionRss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionVf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionPhyPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionPortId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionMeter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionOfSetMplsTtl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionOfSetNwTtl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionOfPushVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionOfSetVlanVid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionOfSetVlanPcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionOfPopMpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionOfPushMpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionVxlanEncap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionNvgreEncap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionRawEncap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionRawDecap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSetIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSetIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSetTp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSetTtl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSetMac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSetTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSetMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowActionSetDscp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RteFlowListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFlowCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFlowofPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestofPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestIsolate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestListPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortsInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFlowCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFlowQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFlowList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePortList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_flowconfig_rpc_v1_flow_flow_proto_goTypes,
		DependencyIndexes: file_pkg_flowconfig_rpc_v1_flow_flow_proto_depIdxs,
		EnumInfos:         file_pkg_flowconfig_rpc_v1_flow_flow_proto_enumTypes,
		MessageInfos:      file_pkg_flowconfig_rpc_v1_flow_flow_proto_msgTypes,
	}.Build()
	File_pkg_flowconfig_rpc_v1_flow_flow_proto = out.File
	file_pkg_flowconfig_rpc_v1_flow_flow_proto_rawDesc = nil
	file_pkg_flowconfig_rpc_v1_flow_flow_proto_goTypes = nil
	file_pkg_flowconfig_rpc_v1_flow_flow_proto_depIdxs = nil
}
