// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2020-2023 Intel Corporation

syntax = "proto3";

package flow;

import "google/protobuf/any.proto";

service FlowService {
    rpc Validate(RequestFlowCreate) returns (ResponseFlow){};
    rpc Create(RequestFlowCreate) returns (ResponseFlowCreate){};
    rpc Destroy(RequestFlowofPort) returns (ResponseFlow){};
    rpc Query(RequestFlowofPort) returns (ResponseFlowQuery){};
    rpc List(RequestofPort) returns (ResponseFlowList){};
    rpc Flush(RequestofPort) returns (ResponseFlow){};
    rpc Isolate(RequestIsolate) returns (ResponseFlow){};
    rpc ListPorts(RequestListPorts) returns(ResponsePortList) {}
}

message rte_flow_attr {
    uint32 group = 1;
    uint32 priority = 2;
    uint32 ingress = 3;
    uint32 egress = 4;
    uint32 transfer = 5;
    uint32 reserved=6;
}


message gre_key_default_mask {
    uint32 gre_key_default_mask =1;
}

message rte_flow_item_any {
	uint32 num=1 ; /**< Number of layers covered. */
}

message rte_flow_item_vf {
	uint32 id=1 ; /**< VF ID. */
}

message rte_flow_item_phy_port {
	uint32 index=1 ; /**< Physical port index. */
}

message rte_flow_item_port_id {
	uint32 id=1 ; /**< DPDK port ID. */
}

message rte_flow_item_raw {
	uint32  relative=1; /**< Look for pattern after the previous item. */
	uint32  search=2  ; /**< Search pattern from offset (see also limit). */
	uint32  reserved=3; /**< Reserved, must be set to zero. */
	int32   offset=4  ;/**< Absolute or relative offset for pattern. */
	uint32  limit=5   ; /**< Search area limit for start of pattern. */
	uint32  length=6  ; /**< Pattern length. */
	uint32  pattern=7 ; /**< Byte string to look for. */
}

message rte_ether_addr {
	 bytes addr_bytes=1; /**< Addr bytes in tx order */
} 
message rte_flow_item_eth {
   rte_ether_addr dst=1; /**< Destination MAC. */
   rte_ether_addr src=2; /**< Source MAC. */
   uint32 type=3; /**< EtherType or TPID. */
}

message rte_flow_item_vlan {
	uint32 tci=1; /**< Tag control information. */
	uint32 inner_type=2; /**< Inner EtherType or TPID. */
}

message rte_ipv4_hdr {
	uint32  version_ihl=1;		/**< version and header length */
	uint32  type_of_service=2;	/**< type of service */
	uint32  total_length=3;	/**< length of packet */
	uint32  packet_id=4;		/**< packet ID */
	uint32  fragment_offset=5;	/**< fragmentation offset */
	uint32  time_to_live=6;		/**< time to live */
	uint32  next_proto_id=7;		/**< protocol ID */
	uint32  hdr_checksum=8;	/**< header checksum */
	uint32  src_addr=9;		/**< source address */
	uint32  dst_addr=10;		/**< destination address */
}
message rte_flow_item_ipv4 {
	rte_ipv4_hdr hdr=1; /**< IPv4 header definition. */
}

message rte_ipv6_hdr {
	uint32 vtc_flow=1;	/**< IP version, traffic class & flow label. */
	uint32 payload_len=2;	/**< IP packet length - includes header size */
	uint32  proto=3;		/**< Protocol, next header. */
	uint32  hop_limits=4;	/**< Hop limits. */
	bytes  src_addr=5;	/**< IP address of source host. */
	bytes dst_addr=6;	/**< IP address of destination host(s). */
}
message rte_flow_item_ipv6 {
	rte_ipv6_hdr hdr=1; /**< IPv6 header definition. */
}



message rte_icmp_hdr{
	uint32  icmp_type=1;     /* ICMP packet type. */
	uint32  icmp_code=2;     /* ICMP packet code. */
	uint32 icmp_cksum=3;  /* ICMP packet checksum. */
	uint32 icmp_ident=4;  /* ICMP packet identifier. */
	uint32 icmp_seq_nb=5; /* ICMP packet sequence number. */
}

message rte_flow_item_icmp {
	rte_icmp_hdr hdr=1; /**< ICMP header definition. */
}


message rte_udp_hdr{
	uint32 src_port=1;    /**< UDP source port. */
	uint32 dst_port=2;    /**< UDP destination port. */
	uint32 dgram_len=3;   /**< UDP datagram length */
	uint32 dgram_cksum=4; /**< UDP datagram checksum */
}
message rte_flow_item_udp {
    rte_udp_hdr hdr=1; /**< UDP header definition. */
}


message  rte_tcp_hdr{
	uint32  src_port=1; /**< TCP source port. */
	uint32  dst_port=2; /**< TCP destination port. */
	uint32  sent_seq=3; /**< TX data sequence number. */
	uint32  recv_ack=4; /**< RX data acknowledgment sequence number. */
	uint32  data_off=5;   /**< Data offset. */
	uint32  tcp_flags=6;  /**< TCP flags */
	uint32  rx_win=7;   /**< RX flow control window. */
	uint32  cksum=8;    /**< TCP checksum. */
	uint32  tcp_urp=9;  /**< TCP urgent pointer, if any. */   
}
message rte_flow_item_tcp {
	rte_tcp_hdr hdr=1; /**< TCP header definition. */
}


message rte_sctp_hdr{
	uint32  src_port = 1; /**< Source port. */
	uint32  dst_port = 2; /**< Destin port. */
	uint32  tag     = 3;  /**< Validation tag. */
	uint32  cksum   = 4;  /**< Checksum. */
}
message rte_flow_item_sctp {
	rte_sctp_hdr hdr=1; /**< SCTP header definition. */
}


message rte_flow_item_vxlan {
	uint32  flags=1; /**< Normally 0x08 (I flag). */
	bytes   rsvd0=2; /**< Reserved, normally 0x000000. */
	bytes   vni=3; /**< VXLAN identifier. */
	uint32  rsvd1=4; /**< Reserved, normally 0x00. */
}



message rte_flow_item_e_tag {
	/**
	 * E-Tag control information (E-TCI).
	 * E-PCP (3b), E-DEI (1b), ingress E-CID base (12b).
	 */
	uint32  epcp_edei_in_ecid_b=1;
	/** Reserved (2b), GRP (2b), E-CID base (12b). */
	uint32  rsvd_grp_ecid_b=2;
	uint32  in_ecid_e=3; /**< Ingress E-CID ext. */
	uint32  ecid_e=4; /**< E-CID ext. */
	uint32  inner_type=5; /**< Inner EtherType or TPID. */
}



message rte_flow_item_nvgre {
	/**
	 * Checksum (1b), undefined (1b), key bit (1b), sequence number (1b),
	 * reserved 0 (9b), version (3b).
	 *
	 * c_k_s_rsvd0_ver must have value 0x2000 according to RFC 7637.
	 */
	uint32 c_k_s_rsvd0_ver=1;
	uint32 protocol=2; /**< Protocol type (0x6558). */
	bytes  tni=3; /**< Virtual subnet ID. */
	uint32 flow_id=4; /**< Flow ID. */
}


message rte_flow_item_mpls {
	/**
	 * Label (20b), TC (3b), Bottom of Stack (1b).
	 */
	bytes  label_tc_s=1;
	uint32 ttl=2; /** Time-to-Live. */
}


message rte_flow_item_gre {
	/**
	 * Checksum (1b), reserved 0 (12b), version (3b).
	 * Refer to RFC 2784.
	 */
	uint32 c_rsvd0_ver=1;
	uint32 protocol=2; /**< Protocol type. */
}


message rte_flow_item_fuzzy {
	uint32 thresh=1; /**< Accuracy threshold. */
}



message rte_flow_item_gtp {
	/**
	 * Version (3b), protocol type (1b), reserved (1b),
	 * Extension header flag (1b),
	 * Sequence number flag (1b),
	 * N-PDU number flag (1b).
	 */
	uint32  v_pt_rsv_flags=1;
	uint32  msg_type=2; /**< Message type. */
	uint32  msg_len=3; /**< Message length. */
	uint32  teid=4; /**< Tunnel endpoint identifier. */
}



message  rte_esp_hdr {
	uint32 spi=1;  /**< Security Parameters Index */
	uint32 seq=2;  /**< packet sequence number */
}
message rte_flow_item_esp {
	rte_esp_hdr hdr=1; /**< ESP header definition. */
}


message rte_flow_item_geneve {
	/**
	 * Version (2b), length of the options fields (6b), OAM packet (1b),
	 * critical options present (1b), reserved 0 (6b).
	 */
	uint32 ver_opt_len_o_c_rsvd0=1;
	uint32 protocol=2; /**< Protocol type. */
	bytes  vni=3; /**< Virtual Network Identifier. */
	uint32 rsvd1=4; /**< Reserved, normally 0x00. */
}




message rte_flow_item_vxlan_gpe {
	uint32 flags=1; /**< Normally 0x0c (I and P flags). */
	bytes  rsvd0=2; /**< Reserved, normally 0x0000. */
	uint32 protocol=3; /**< Protocol type. */
	bytes  vni=4; /**< VXLAN identifier. */
	uint32 rsvd1=5; /**< Reserved, normally 0x00. */
}

message rte_flow_item_arp_eth_ipv4 {
	uint32 hrd=1; /**< Hardware type, normally 1. */
	uint32 pro=2; /**< Protocol type, normally 0x0800. */
	uint32 hln=3; /**< Hardware address length, normally 6. */
	uint32 pln=4; /**< Protocol address length, normally 4. */
	uint32 op=5; /**< Opcode (1 for request, 2 for reply). */
	rte_ether_addr sha=6; /**< Sender hardware address. */
	uint32 spa=7; /**< Sender IPv4 address. */
	rte_ether_addr tha=8; /**< Target hardware address. */
	uint32 tpa=9; /**< Target IPv4 address. */
}

message rte_flow_item_ipv6_ext {
	uint32 next_hdr=1; /**< Next header. */
}

message  rte_flow_item_icmp6 {
    uint32  type=1; /**< ICMPv6 type. */
    uint32  code=2; /**< ICMPv6 code. */
    uint32  checksum=3; /**< ICMPv6 checksum. */
}

message rte_flow_item_icmp6_nd_ns {
	uint32 type=1; /**< ICMPv6 type, normally 135. */
	uint32 code=2; /**< ICMPv6 code, normally 0. */
	uint32  checksum=3; /**< ICMPv6 checksum. */
	uint32  reserved=4; /**< Reserved, normally 0. */
	bytes   target_addr=5; /**< Target address. */
}

message rte_flow_item_icmp6_nd_na {
	uint32  type=1; /**< ICMPv6 type, normally 136. */
	uint32  code=2; /**< ICMPv6 code, normally 0. */
	uint32  checksum=3; /**< ICMPv6 checksum. */
	/**
	 * Route flag (1b), solicited flag (1b), override flag (1b),
	 * reserved (29b).
	 */
	uint32  rso_reserved=4;
	bytes  target_addr=5; /**< Target address. */
}

message rte_flow_item_icmp6_nd_opt {
	uint32 type=1; /**< ND option type. */
	uint32 length=2; /**< ND option length. */
}

message  rte_flow_item_icmp6_nd_opt_sla_eth {
	uint32 type=1; /**< ND option type, normally 1. */
	uint32 length=2; /**< ND option length, normally 1. */
	rte_ether_addr sla=3; /**< Source Ethernet LLA. */
}

message  rte_flow_item_icmp6_nd_opt_sta_eth {
	uint32 type=1; /**< ND option type, normally 1. */
	uint32 length=2; /**< ND option length, normally 1. */
	rte_ether_addr tla=3; /**< Source Ethernet LLA. */
}

message rte_flow_item_mark {
	uint32 id = 1;
}
message rte_flow_item_meta {
	uint32 data=1;
}



message rte_flow_item_gtp_psc {
	uint32 pdu_type=1; /**< PDU type. */
	uint32 qfi=2; /**< QoS flow identifier. */
}


message rte_flow_item_pppoe {
	/**
	 * Version (4b), type (4b).
	 */
	uint32 version_type=1;
	uint32 code=2; /**< Message type. */
	uint32  session_id=3; /**< Session identifier. */
	uint32  length=4; /**< Payload length. */
}

message rte_flow_item_pppoe_proto_id {
	uint32  proto_id=1; /**< PPP protocol identifier. */
}

message rte_flow_item_nsh {
	uint32 version = 1;
	uint32 oam_pkt = 2;
	uint32 reserved = 3;
	uint32 ttl = 4;
	uint32 length = 5;
	uint32 reserved1 = 6;
	uint32 mdtype = 7;
	uint32 next_proto = 8;
	uint32 spi = 9;
	uint32 sindex = 10;
}

message rte_flow_item_igmp {
	uint32 type = 1;
	uint32 max_resp_time = 2;
	uint32 checksum = 3;
	uint32 group_addr = 4;
}

message rte_flow_item_ah {
	uint32 next_hdr = 1;
	uint32 payload_len = 2;
	uint32 reserved = 3;
	uint32 spi = 4;
	uint32 seq_num =5;
}

message rte_higig2_frc {
	uint32 ksop = 1;
    uint32 tc = 2;
    uint32 mcst = 3;
    uint32 resv = 4;
    uint32 dst_modid = 5;
    uint32 dst_pid = 6;
    uint32 src_modid = 7;
    uint32 src_pid = 8;
    uint32 lbid = 9;
    uint32 ppd_type = 11;
    uint32 resv1 = 12;
    uint32 dp = 13;
}

message rte_higig2_ppt_type0 {
    uint32 mirror=1;
    uint32 mirror_done=2;
    uint32 mirror_only=3;
    uint32 ingress_tagged=4;
    uint32 dst_tgid=5;
    uint32 dst_t=6;
    uint32 vc_label2=7;
    uint32 label_present=8;
    uint32 l3=9;
    uint32 res=10;
    uint32 vc_label1=11;
    uint32 vc_label0=12;
    uint32 vid_high=13;
    uint32 vid_low=14;
    uint32 opc=15;
    uint32 res1=16;
    uint32 srce_t=17;
    uint32 pf=18;
    uint32 res2=19;
    uint32 hdr_ext_length=20;
}

message rte_higig2_ppt_type1 {
    uint32 classification=1;
    uint32 resv=2;
    uint32 vid=3;
    uint32 opcode=4;
    uint32 resv1=5;
    uint32 src_t=6;
    uint32 pfm=7;
    uint32 resv2=8;
    uint32 hdr_ext_len=9;
}

message rte_higig2_hdr {
    rte_higig2_frc fcr=1;
    rte_higig2_ppt_type0 ppt0=2;
    rte_higig2_ppt_type1 ppt1=3;
}

message rte_flow_item_higig2_hdr {
	rte_higig2_hdr hdr=1;
}

message rte_flow_item_tag {
	uint32 data=1;
	uint32 index=2;
}

message rte_flow_item_l2tpv3oip {
	uint32 session_id=1; /**< Session ID. */
}

enum rte_flow_item_type {
	/**
	 * [META]
	 *
	 * End marker for item lists. Prevents further processing of items;
	 * thereby ending the pattern.
	 *
	 * No associated specification messageure.
	 */
	RTE_FLOW_ITEM_TYPE_END=0;

	/**
	 * [META]
	 *
	 * Used as a placeholder for convenience. It is ignored and simply
	 * discarded by PMDs.
	 *
	 * No associated specification messageure.
	 */
	RTE_FLOW_ITEM_TYPE_VOID=1;

	/**
	 * [META]
	 *
	 * Inverted matching; i.e. process packets that do not match the
	 * pattern.
	 *
	 * No associated specification messageure.
	 */
	RTE_FLOW_ITEM_TYPE_INVERT=2;

	/**
	 * Matches any protocol in place of the current layer; a single ANY
	 * may also stand for several protocol layers.
	 *
	 * See message rte_flow_item_any.
	 */
	RTE_FLOW_ITEM_TYPE_ANY=3;

	/**
	 * [META]
	 *
	 * Matches traffic originating from (ingress) or going to (egress)
	 * the physical function of the current device.
	 *
	 * No associated specification messageure.
	 */
	RTE_FLOW_ITEM_TYPE_PF=4;

	/**
	 * [META]
	 *
	 * Matches traffic originating from (ingress) or going to (egress) a
	 * given virtual function of the current device.
	 *
	 * See message rte_flow_item_vf.
	 */
	RTE_FLOW_ITEM_TYPE_VF=5;

	/**
	 * [META]
	 *
	 * Matches traffic originating from (ingress) or going to (egress) a
	 * physical port of the underlying device.
	 *
	 * See message rte_flow_item_phy_port.
	 */
	RTE_FLOW_ITEM_TYPE_PHY_PORT=6;

	/**
	 * [META]
	 *
	 * Matches traffic originating from (ingress) or going to (egress) a
	 * given DPDK port ID.
	 *
	 * See message rte_flow_item_port_id.
	 */
	RTE_FLOW_ITEM_TYPE_PORT_ID=7;

	/**
	 * Matches a byte string of a given length at a given offset.
	 *
	 * See message rte_flow_item_raw.
	 */
	RTE_FLOW_ITEM_TYPE_RAW=8;

	/**
	 * Matches an Ethernet header.
	 *
	 * See message rte_flow_item_eth.
	 */
	RTE_FLOW_ITEM_TYPE_ETH=9;

	/**
	 * Matches an 802.1Q/ad VLAN tag.
	 *
	 * See message rte_flow_item_vlan.
	 */
	RTE_FLOW_ITEM_TYPE_VLAN=10;

	/**
	 * Matches an IPv4 header.
	 *
	 * See message rte_flow_item_ipv4.
	 */
	RTE_FLOW_ITEM_TYPE_IPV4=11;

	/**
	 * Matches an IPv6 header.
	 *
	 * See message rte_flow_item_ipv6.
	 */
	RTE_FLOW_ITEM_TYPE_IPV6=12;

	/**
	 * Matches an ICMP header.
	 *
	 * See message rte_flow_item_icmp.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP=13;

	/**
	 * Matches a UDP header.
	 *
	 * See message rte_flow_item_udp.
	 */
	RTE_FLOW_ITEM_TYPE_UDP=14;

	/**
	 * Matches a TCP header.
	 *
	 * See message rte_flow_item_tcp.
	 */
	RTE_FLOW_ITEM_TYPE_TCP=15;

	/**
	 * Matches a SCTP header.
	 *
	 * See message rte_flow_item_sctp.
	 */
	RTE_FLOW_ITEM_TYPE_SCTP=16;

	/**
	 * Matches a VXLAN header.
	 *
	 * See message rte_flow_item_vxlan.
	 */
	RTE_FLOW_ITEM_TYPE_VXLAN=17;

	/**
	 * Matches a E_TAG header.
	 *
	 * See message rte_flow_item_e_tag.
	 */
	RTE_FLOW_ITEM_TYPE_E_TAG=18;

	/**
	 * Matches a NVGRE header.
	 *
	 * See message rte_flow_item_nvgre.
	 */
	RTE_FLOW_ITEM_TYPE_NVGRE=19;

	/**
	 * Matches a MPLS header.
	 *
	 * See message rte_flow_item_mpls.
	 */
	RTE_FLOW_ITEM_TYPE_MPLS=20;

	/**
	 * Matches a GRE header.
	 *
	 * See message rte_flow_item_gre.
	 */
	RTE_FLOW_ITEM_TYPE_GRE=21;

	/**
	 * [META]
	 *
	 * Fuzzy pattern match; expect faster than default.
	 *
	 * This is for device that support fuzzy matching option.
	 * Usually a fuzzy matching is fast but the cost is accuracy.
	 *
	 * See message rte_flow_item_fuzzy.
	 */
	RTE_FLOW_ITEM_TYPE_FUZZY=22;

	/**
	 * Matches a GTP header.
	 *
	 * Configure flow for GTP packets.
	 *
	 * See message rte_flow_item_gtp.
	 */
	RTE_FLOW_ITEM_TYPE_GTP=23;

	/**
	 * Matches a GTP header.
	 *
	 * Configure flow for GTP-C packets.
	 *
	 * See message rte_flow_item_gtp.
	 */
	RTE_FLOW_ITEM_TYPE_GTPC=24;

	/**
	 * Matches a GTP header.
	 *
	 * Configure flow for GTP-U packets.
	 *
	 * See message rte_flow_item_gtp.
	 */
	RTE_FLOW_ITEM_TYPE_GTPU=25;

	/**
	 * Matches a ESP header.
	 *
	 * See message rte_flow_item_esp.
	 */
	RTE_FLOW_ITEM_TYPE_ESP=26;

	/**
	 * Matches a GENEVE header.
	 *
	 * See message rte_flow_item_geneve.
	 */
	RTE_FLOW_ITEM_TYPE_GENEVE=27;

	/**
	 * Matches a VXLAN-GPE header.
	 *
	 * See message rte_flow_item_vxlan_gpe.
	 */
	RTE_FLOW_ITEM_TYPE_VXLAN_GPE=28;

	/**
	 * Matches an ARP header for Ethernet/IPv4.
	 *
	 * See message rte_flow_item_arp_eth_ipv4.
	 */
	RTE_FLOW_ITEM_TYPE_ARP_ETH_IPV4=29;

	/**
	 * Matches the presence of any IPv6 extension header.
	 *
	 * See message rte_flow_item_ipv6_ext.
	 */
	RTE_FLOW_ITEM_TYPE_IPV6_EXT=30;

	/**
	 * Matches any ICMPv6 header.
	 *
	 * See message rte_flow_item_icmp6.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6=31;

	/**
	 * Matches an ICMPv6 neighbor discovery solicitation.
	 *
	 * See message rte_flow_item_icmp6_nd_ns.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_NS=32;

	/**
	 * Matches an ICMPv6 neighbor discovery advertisement.
	 *
	 * See message rte_flow_item_icmp6_nd_na.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_NA=33;

	/**
	 * Matches the presence of any ICMPv6 neighbor discovery option.
	 *
	 * See message rte_flow_item_icmp6_nd_opt.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT=34;

	/**
	 * Matches an ICMPv6 neighbor discovery source Ethernet link-layer
	 * address option.
	 *
	 * See message rte_flow_item_icmp6_nd_opt_sla_eth.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_SLA_ETH=35;

	/**
	 * Matches an ICMPv6 neighbor discovery target Ethernet link-layer
	 * address option.
	 *
	 * See message rte_flow_item_icmp6_nd_opt_tla_eth.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_TLA_ETH=36;

	/**
	 * Matches specified mark field.
	 *
	 * See message rte_flow_item_mark.
	 */
	RTE_FLOW_ITEM_TYPE_MARK=37;

	/**
	 * [META]
	 *
	 * Matches a metadata value.
	 *
	 * See message rte_flow_item_meta.
	 */
	RTE_FLOW_ITEM_TYPE_META=38;

	/**
	 * Matches a GRE optional key field.
	 *
	 * The value should a big-endian 32bit integer.
	 *
	 * When this item present the K bit is implicitly matched as "1"
	 * in the default mask.
	 *
	 * @p spec/mask type:
	 * @code rte_be32_t * @endcode
	 */
	RTE_FLOW_ITEM_TYPE_GRE_KEY=39;

	/**
	 * Matches a GTP extension header: PDU session container.
	 *
	 * Configure flow for GTP packets with extension header type 0x85.
	 *
	 * See message rte_flow_item_gtp_psc.
	 */
	RTE_FLOW_ITEM_TYPE_GTP_PSC=40;

	/**
	 * Matches a PPPoE header.
	 *
	 * Configure flow for PPPoE session packets.
	 *
	 * See message rte_flow_item_pppoe.
	 */
	RTE_FLOW_ITEM_TYPE_PPPOES=41;

	/**
	 * Matches a PPPoE header.
	 *
	 * Configure flow for PPPoE discovery packets.
	 *
	 * See message rte_flow_item_pppoe.
	 */
	RTE_FLOW_ITEM_TYPE_PPPOED=42;

	/**
	 * Matches a PPPoE optional proto_id field.
	 *
	 * It only applies to PPPoE session packets.
	 *
	 * See message rte_flow_item_pppoe_proto_id.
	 */
	RTE_FLOW_ITEM_TYPE_PPPOE_PROTO_ID=43;

	/**
	 * Matches Network service header (NSH).
	 * See message rte_flow_item_nsh.
	 *
	 */
	RTE_FLOW_ITEM_TYPE_NSH=44;

	/**
	 * Matches Internet Group Management Protocol (IGMP).
	 * See message rte_flow_item_igmp.
	 *
	 */
	RTE_FLOW_ITEM_TYPE_IGMP=45;

	/**
	 * Matches IP Authentication Header (AH).
	 * See message rte_flow_item_ah.
	 *
	 */
	RTE_FLOW_ITEM_TYPE_AH=46;

	/**
	 * Matches a HIGIG header.
	 * see message rte_flow_item_higig2_hdr.
	 */
	RTE_FLOW_ITEM_TYPE_HIGIG2=47;

	/*
	 * [META]
	 *
	 * Matches a tag value.
	 *
	 * See message rte_flow_item_tag.
	 */
	RTE_FLOW_ITEM_TYPE_TAG=48;
}

message rte_flow_item {
    rte_flow_item_type type = 1;
	google.protobuf.Any spec = 2;
	google.protobuf.Any last=3;
	google.protobuf.Any mask=4;
}

enum rte_eth_hash_function {
	RTE_ETH_HASH_FUNCTION_DEFAULT = 0;
	RTE_ETH_HASH_FUNCTION_TOEPLITZ=1; /**< Toeplitz */
	RTE_ETH_HASH_FUNCTION_SIMPLE_XOR=2; /**< Simple XOR */
	/**
	 * Symmetric Toeplitz: src, dst will be replaced by
	 * xor(src, dst). For the case with src/dst only,
	 * src or dst address will xor with zero pair.
	 */
	RTE_ETH_HASH_FUNCTION_SYMMETRIC_TOEPLITZ=3;
	RTE_ETH_HASH_FUNCTION_MAX=4;
}


message rte_flow_action_mark {
	uint32 id = 1; /**< Integer value to return with packets. */
}


message rte_flow_action_jump {
	uint32 group = 1;
}

message rte_flow_action_queue {
	uint32 index = 1; /**< Queue index to use. */
}


message rte_flow_action_count {
	uint32 shared = 1; /**< Share counter ID with other flow rules. */
	uint32 reserved = 2; /**< Reserved, must be zero. */
	uint32 id = 3; /**< Counter ID. */
}

message rte_flow_query_count {
	uint32 reset = 1; /**< Reset counters after query [in]. */
	uint32 hits_set = 2; /**< hits field is set [out]. */
	uint32 bytes_set = 3; /**< bytes field is set [out]. */
	uint32 reserved = 4; /**< Reserved, must be zero [in, out]. */
	uint64 hits = 5; /**< Number of hits for this rule [out]. */
	uint64 bytes = 6; /**< Number of bytes through this rule [out]. */
}

message rte_flow_action_rss {
	rte_eth_hash_function func=1; /**< RSS hash function to apply. */
	/**
	 * Packet encapsulation level RSS hash @p types apply to.
	 *
	 * - @p 0 requests the default behavior. Depending on the packet
	 *   type, it can mean outermost, innermost, anything in between or
	 *   even no RSS.
	 *
	 *   It basically stands for the innermost encapsulation level RSS
	 *   can be performed on according to PMD and device capabilities.
	 *
	 * - @p 1 requests RSS to be performed on the outermost packet
	 *   encapsulation level.
	 *
	 * - @p 2 and subsequent values request RSS to be performed on the
	 *   specified inner packet encapsulation level, from outermost to
	 *   innermost (lower to higher values).
	 *
	 * Values other than @p 0 are not necessarily supported.
	 *
	 * Requesting a specific RSS level on unrecognized traffic results
	 * in undefined behavior. For predictable results, it is recommended
	 * to make the flow rule pattern match packet headers up to the
	 * requested encapsulation level so that only matching traffic goes
	 * through.
	 */
	uint32  level=2;
	uint64  types=3; /**< Specific RSS hash types (see ETH_RSS_*). */
	uint32  key_len=4; /**< Hash key length in bytes. */
	uint32  queue_num=5; /**< Number of entries in @p queue. */
	uint32  key=6; /**< Hash key. */
	uint32  queue=7; /**< Queue indices to use. */
}

message rte_flow_action_vf {
	uint32 reserved = 1;
	uint32 original = 2;
	uint32 id = 3;
}


message rte_flow_action_phy_port {
	uint32 original = 1; /**< Use original port index if possible. */
	uint32 reserved = 2; /**< Reserved, must be zero. */
	uint32 index = 3; /**< Physical port index. */
}

message rte_flow_action_port_id {
	uint32 original = 1; /**< Use original DPDK port ID if possible. */
	uint32 reserved = 2; /**< Reserved, must be zero. */
	uint32 id = 3; /**< DPDK port ID. */
}

message rte_flow_action_meter {
	uint32 mtr_id = 1; /**< MTR object ID created with rte_mtr_create(). */
}

message rte_flow_action_security {
	google.protobuf.Any security_session = 1; /**< Pointer to security session structure. */
}

message rte_flow_action_of_set_mpls_ttl {
	uint32 mpls_ttl = 1; /**< MPLS TTL. */
}

message rte_flow_action_of_set_nw_ttl {
	uint32 nw_ttl = 1; /**< IP TTL. */
}

message rte_flow_action_of_push_vlan {
	uint32 ethertype = 1; /**< EtherType. */
}

message rte_flow_action_of_set_vlan_vid {
	uint32 vlan_vid = 1; /**< VLAN id. */
}

message rte_flow_action_of_set_vlan_pcp {
	uint32 vlan_pcp = 1; /**< VLAN priority. */
}

message rte_flow_action_of_pop_mpls {
	uint32 ethertype = 1; /**< EtherType. */
}

message rte_flow_action_of_push_mpls {
	uint32 ethertype = 1; /**< EtherType. */
}

message rte_flow_action_vxlan_encap {
	/**
	 * Encapsulating vxlan tunnel definition
	 * (terminated by the END pattern item).
	 */
	rte_flow_item definition = 1;
}

message rte_flow_action_nvgre_encap {
	/**
	 * Encapsulating vxlan tunnel definition
	 * (terminated by the END pattern item).
	 */
	rte_flow_item definition = 1;
}

message rte_flow_action_raw_encap {
	uint32   data = 1; /**< Encapsulation data. */
	uint32   preserve = 2; /**< Bit-mask of @p data to preserve on output. */
	uint32   size = 3; /**< Size of @p data and @p preserve. */
}
message rte_flow_action_raw_decap {
	uint32  data = 1; /**< Encapsulation data. */
	uint32  size = 2; /**< Size of @p data and @p preserve. */
}

message rte_flow_action_set_ipv4 {
	uint32 ipv4_addr = 1;
}

message rte_flow_action_set_ipv6 {
	repeated  uint32 ipv6_addr = 1;
}

message rte_flow_action_set_tp {
	uint32 port = 1;
}

message rte_flow_action_set_ttl {
	uint32 ttl_value = 1;
}

message rte_flow_action_set_mac {
	repeated uint32 mac_addrf = 1;
}

message rte_flow_action_set_tag {
	uint32 data = 1;
	uint32 mask = 2;
	uint32 index = 3;
}

message rte_flow_action_set_meta {
	uint32 data = 1;
	uint32 mask = 2;
}

message rte_flow_action_set_dscp {
	uint32 dscp = 1;
}
enum rte_flow_action_type {
	/**
	 * End marker for action lists. Prevents further processing of
	 * actions; thereby ending the list.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_END=0;

	/**
	 * Used as a placeholder for convenience. It is ignored and simply
	 * discarded by PMDs.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_VOID=1;

	/**
	 * Leaves traffic up for additional processing by subsequent flow
	 * rules; makes a flow rule non-terminating.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_PASSTHRU=2;

	/**
	 * RTE_FLOW_ACTION_TYPE_JUMP
	 *
	 * Redirects packets to a group on the current device.
	 *
	 * See message rte_flow_action_jump.
	 */
	RTE_FLOW_ACTION_TYPE_JUMP=3;

	/**
	 * Attaches an integer value to packets and sets PKT_RX_FDIR and
	 * PKT_RX_FDIR_ID mbuf flags.
	 *
	 * See message rte_flow_action_mark.
	 */
	RTE_FLOW_ACTION_TYPE_MARK=4;

	/**
	 * Flags packets. Similar to MARK without a specific value; only
	 * sets the PKT_RX_FDIR mbuf flag.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_FLAG=5;

	/**
	 * Assigns packets to a given queue index.
	 *
	 * See message rte_flow_action_queue.
	 */
	RTE_FLOW_ACTION_TYPE_QUEUE=6;

	/**
	 * Drops packets.
	 *
	 * PASSTHRU overrides this action if both are specified.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_DROP=7;

	/**
	 * Enables counters for this flow rule.
	 *
	 * These counters can be retrieved and reset through rte_flow_query();
	 * see message rte_flow_query_count.
	 *
	 * See message rte_flow_action_count.
	 */
	RTE_FLOW_ACTION_TYPE_COUNT=8;

	/**
	 * Similar to QUEUE; except RSS is additionally performed on packets
	 * to spread them among several queues according to the provided
	 * parameters.
	 *
	 * See message rte_flow_action_rss.
	 */
	RTE_FLOW_ACTION_TYPE_RSS=9;

	/**
	 * Directs matching traffic to the physical function (PF) of the
	 * current device.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_PF=10;

	/**
	 * Directs matching traffic to a given virtual function of the
	 * current device.
	 *
	 * See message rte_flow_action_vf.
	 */
	RTE_FLOW_ACTION_TYPE_VF=11;

	/**
	 * Directs packets to a given physical port index of the underlying
	 * device.
	 *
	 * See message rte_flow_action_phy_port.
	 */
	RTE_FLOW_ACTION_TYPE_PHY_PORT=12;

	/**
	 * Directs matching traffic to a given DPDK port ID.
	 *
	 * See message rte_flow_action_port_id.
	 */
	RTE_FLOW_ACTION_TYPE_PORT_ID=13;

	/**
	 * Traffic metering and policing (MTR).
	 *
	 * See message rte_flow_action_meter.
	 * See file rte_mtr.h for MTR object configuration.
	 */
	RTE_FLOW_ACTION_TYPE_METER=14;

	/**
	 * Redirects packets to security engine of current device for security
	 * processing as specified by security session.
	 *
	 * See message rte_flow_action_security.
	 */
	RTE_FLOW_ACTION_TYPE_SECURITY=15;

	/**
	 * Implements OFPAT_SET_MPLS_TTL ("MPLS TTL") as defined by the
	 * OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_set_mpls_ttl.
	 */
	RTE_FLOW_ACTION_TYPE_OF_SET_MPLS_TTL=16;

	/**
	 * Implements OFPAT_DEC_MPLS_TTL ("decrement MPLS TTL") as defined
	 * by the OpenFlow Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_DEC_MPLS_TTL=17;

	/**
	 * Implements OFPAT_SET_NW_TTL ("IP TTL") as defined by the OpenFlow
	 * Switch Specification.
	 *
	 * See message rte_flow_action_of_set_nw_ttl.
	 */
	RTE_FLOW_ACTION_TYPE_OF_SET_NW_TTL=18;

	/**
	 * Implements OFPAT_DEC_NW_TTL ("decrement IP TTL") as defined by
	 * the OpenFlow Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_DEC_NW_TTL=19;

	/**
	 * Implements OFPAT_COPY_TTL_OUT ("copy TTL "outwards" -- from
	 * next-to-outermost to outermost") as defined by the OpenFlow
	 * Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_OUT=20;

	/**
	 * Implements OFPAT_COPY_TTL_IN ("copy TTL "inwards" -- from
	 * outermost to next-to-outermost") as defined by the OpenFlow
	 * Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_IN=21;

	/**
	 * Implements OFPAT_POP_VLAN ("pop the outer VLAN tag") as defined
	 * by the OpenFlow Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_POP_VLAN=22;

	/**
	 * Implements OFPAT_PUSH_VLAN ("push a new VLAN tag") as defined by
	 * the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_push_vlan.
	 */
	RTE_FLOW_ACTION_TYPE_OF_PUSH_VLAN=23;

	/**
	 * Implements OFPAT_SET_VLAN_VID ("set the 802.1q VLAN id") as
	 * defined by the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_set_vlan_vid.
	 */
	RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_VID=24;

	/**
	 * Implements OFPAT_SET_LAN_PCP ("set the 802.1q priority") as
	 * defined by the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_set_vlan_pcp.
	 */
	RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_PCP=25;

	/**
	 * Implements OFPAT_POP_MPLS ("pop the outer MPLS tag") as defined
	 * by the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_pop_mpls.
	 */
	RTE_FLOW_ACTION_TYPE_OF_POP_MPLS=26;

	/**
	 * Implements OFPAT_PUSH_MPLS ("push a new MPLS tag") as defined by
	 * the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_push_mpls.
	 */
	RTE_FLOW_ACTION_TYPE_OF_PUSH_MPLS=27;

	/**
	 * Encapsulate flow in VXLAN tunnel as defined in
	 * rte_flow_action_vxlan_encap action messageure.
	 *
	 * See message rte_flow_action_vxlan_encap.
	 */
	RTE_FLOW_ACTION_TYPE_VXLAN_ENCAP=28;

	/**
	 * Decapsulate outer most VXLAN tunnel from matched flow.
	 *
	 * If flow pattern does not define a valid VXLAN tunnel (as specified by
	 * RFC7348) then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION
	 * error.
	 */
	RTE_FLOW_ACTION_TYPE_VXLAN_DECAP=29;

	/**
	 * Encapsulate flow in NVGRE tunnel defined in the
	 * rte_flow_action_nvgre_encap action messageure.
	 *
	 * See message rte_flow_action_nvgre_encap.
	 */
	RTE_FLOW_ACTION_TYPE_NVGRE_ENCAP=30;

	/**
	 * Decapsulate outer most NVGRE tunnel from matched flow.
	 *
	 * If flow pattern does not define a valid NVGRE tunnel (as specified by
	 * RFC7637) then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION
	 * error.
	 */
	RTE_FLOW_ACTION_TYPE_NVGRE_DECAP=31;

	/**
	 * Add outer header whose template is provided in its data buffer
	 *
	 * See message rte_flow_action_raw_encap.
	 */
	RTE_FLOW_ACTION_TYPE_RAW_ENCAP=32;

	/**
	 * Remove outer header whose template is provided in its data buffer.
	 *
	 * See message rte_flow_action_raw_decap
	 */
	RTE_FLOW_ACTION_TYPE_RAW_DECAP=33;

	/**
	 * Modify IPv4 source address in the outermost IPv4 header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV4;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_ipv4.
	 */
	RTE_FLOW_ACTION_TYPE_SET_IPV4_SRC=34;

	/**
	 * Modify IPv4 destination address in the outermost IPv4 header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV4;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_ipv4.
	 */
	RTE_FLOW_ACTION_TYPE_SET_IPV4_DST=35;

	/**
	 * Modify IPv6 source address in the outermost IPv6 header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV6;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_ipv6.
	 */
	RTE_FLOW_ACTION_TYPE_SET_IPV6_SRC=36;

	/**
	 * Modify IPv6 destination address in the outermost IPv6 header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV6;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_ipv6.
	 */
	RTE_FLOW_ACTION_TYPE_SET_IPV6_DST=37;

	/**
	 * Modify source port number in the outermost TCP/UDP header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_TCP
	 * or RTE_FLOW_ITEM_TYPE_UDP; then the PMD should return a
	 * RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_tp.
	 */
	RTE_FLOW_ACTION_TYPE_SET_TP_SRC=38;

	/**
	 * Modify destination port number in the outermost TCP/UDP header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_TCP
	 * or RTE_FLOW_ITEM_TYPE_UDP; then the PMD should return a
	 * RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_tp.
	 */
	RTE_FLOW_ACTION_TYPE_SET_TP_DST=39;

	/**
	 * Swap the source and destination MAC addresses in the outermost
	 * Ethernet header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_MAC_SWAP=40;

	/**
	 * Decrease TTL value directly
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_DEC_TTL=41;

	/**
	 * Set TTL value
	 *
	 * See message rte_flow_action_set_ttl
	 */
	RTE_FLOW_ACTION_TYPE_SET_TTL=42;

	/**
	 * Set source MAC address from matched flow.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	 * the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_mac.
	 */
	RTE_FLOW_ACTION_TYPE_SET_MAC_SRC=43;

	/**
	 * Set destination MAC address from matched flow.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	 * the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_mac.
	 */
	RTE_FLOW_ACTION_TYPE_SET_MAC_DST=44;

	/**
	 * Increase sequence number in the outermost TCP header.
	 *
	 * Action configuration specifies the value to increase
	 * TCP sequence number as a big-endian 32 bit integer.
	 *
	 * @p conf type:
	 * @code rte_be32_t * @endcode
	 *
	 * Using this action on non-matching traffic will result in
	 * undefined behavior.
	 */
	RTE_FLOW_ACTION_TYPE_INC_TCP_SEQ=45;

	/**
	 * Decrease sequence number in the outermost TCP header.
	 *
	 * Action configuration specifies the value to decrease
	 * TCP sequence number as a big-endian 32 bit integer.
	 *
	 * @p conf type:
	 * @code rte_be32_t * @endcode
	 *
	 * Using this action on non-matching traffic will result in
	 * undefined behavior.
	 */
	RTE_FLOW_ACTION_TYPE_DEC_TCP_SEQ=46;

	/**
	 * Increase acknowledgment number in the outermost TCP header.
	 *
	 * Action configuration specifies the value to increase
	 * TCP acknowledgment number as a big-endian 32 bit integer.
	 *
	 * @p conf type:
	 * @code rte_be32_t * @endcode

	 * Using this action on non-matching traffic will result in
	 * undefined behavior.
	 */
	RTE_FLOW_ACTION_TYPE_INC_TCP_ACK=47;

	/**
	 * Decrease acknowledgment number in the outermost TCP header.
	 *
	 * Action configuration specifies the value to decrease
	 * TCP acknowledgment number as a big-endian 32 bit integer.
	 *
	 * @p conf type:
	 * @code rte_be32_t * @endcode
	 *
	 * Using this action on non-matching traffic will result in
	 * undefined behavior.
	 */
	RTE_FLOW_ACTION_TYPE_DEC_TCP_ACK=48;

	/**
	 * Set Tag.
	 *
	 * Tag is for internal flow usage only and
	 * is not delivered to the application.
	 *
	 * See message rte_flow_action_set_tag.
	 */
	RTE_FLOW_ACTION_TYPE_SET_TAG=49;

	/**
	 * Set metadata on ingress or egress path.
	 *
	 * See message rte_flow_action_set_meta.
	 */
	RTE_FLOW_ACTION_TYPE_SET_META=50;
}

message rte_flow_action {
    rte_flow_action_type type=1;
    google.protobuf.Any   conf = 2;
}



enum rte_flow_error_type {
	RTE_FLOW_ERROR_TYPE_NONE=0; /**< No error. */
	RTE_FLOW_ERROR_TYPE_UNSPECIFIED=1; /**< Cause unspecified. */
	RTE_FLOW_ERROR_TYPE_HANDLE=2; /**< Flow rule (handle). */
	RTE_FLOW_ERROR_TYPE_ATTR_GROUP=3; /**< Group field. */
	RTE_FLOW_ERROR_TYPE_ATTR_PRIORITY=4; /**< Priority field. */
	RTE_FLOW_ERROR_TYPE_ATTR_INGRESS=5; /**< Ingress field. */
	RTE_FLOW_ERROR_TYPE_ATTR_EGRESS=6; /**< Egress field. */
	RTE_FLOW_ERROR_TYPE_ATTR_TRANSFER=7; /**< Transfer field. */
	RTE_FLOW_ERROR_TYPE_ATTR=8; /**< Attributes structure. */
	RTE_FLOW_ERROR_TYPE_ITEM_NUM=9; /**< Pattern length. */
	RTE_FLOW_ERROR_TYPE_ITEM_SPEC=10; /**< Item specification. */
	RTE_FLOW_ERROR_TYPE_ITEM_LAST=11; /**< Item specification range. */
	RTE_FLOW_ERROR_TYPE_ITEM_MASK=12; /**< Item specification mask. */
	RTE_FLOW_ERROR_TYPE_ITEM=13; /**< Specific pattern item. */
	RTE_FLOW_ERROR_TYPE_ACTION_NUM=14; /**< Number of actions. */
	RTE_FLOW_ERROR_TYPE_ACTION_CONF=15;/**< Action configuration. */
	RTE_FLOW_ERROR_TYPE_ACTION=16; /**< Specific action. */
}
message rte_flow_error {
	rte_flow_error_type type=1;
    google.protobuf.Any cause=2;  // Object responsible for the error.
	string mesg=3; //Human-readable error message.
}

message rte_flow_list_result {
    uint32 flow_id = 1;
    string description = 2;
}
// request of create and validate
message RequestFlowCreate {
    uint32 port_id = 1;
    rte_flow_attr attr = 2;
    repeated   rte_flow_item pattern = 3;
    repeated   rte_flow_action action = 4;
}

// request of query and destroy
message RequestFlowofPort {
    uint32 port_id = 1;
    uint32 flow_id = 2;
}

// request of list and flush
message RequestofPort {
    uint32 port_id = 1;
}
// request of isolate
message RequestIsolate {
    uint32 port_id = 1;
    uint32 isolated_mode = 2;
}

message RequestListPorts {

}

message ports_information {
    uint32 port_id = 1;
    string port_pci = 2;
    string port_mode = 3;
}

message ResponseFlow {
    rte_flow_error error_info = 1;
}

message ResponseFlowCreate {
    uint32 flow_id = 1;
    rte_flow_error error_info = 2;
}

message ResponseFlowQuery {
    rte_flow_error error_info = 1;
    rte_flow_query_count data = 2;
}

message ResponseFlowList {
    repeated rte_flow_list_result results = 1;
}

message ResponsePortList {
    repeated ports_information ports = 1;
}
